Lessons from Dynamic Languages

Radical Simplicity

== Lessons from Dynamic Languages

Joe Gregorio

IBM

WebSphere Technology Institute

Rules of Engagement

Interrupt at any time

Disclaimer

All examples are in Python
----
True in many other languages: Perl, PHP, JavaScript, Ruby, Smalltalk, ...

Shape Matters 

{{{
Aoccdrnig to a rscheearch at Cmabrigde Uinervtisy, 
it deosn't mttaer in waht oredr the ltteers in a
wrod are, the olny iprmoetnt tihng is taht the frist 
and lsat ltteer be at the rghit pclae. The rset can 
be a toatl mses and you can sitll raed it wouthit 
porbelm. Tihs is bcuseae the huamn mnid deos not raed
ervey lteter by istlef, but the wrod as a wlohe.
}}}
----
[http://www.snopes.com/language/apocryph/cambridge.asp Snopes]

Shape Matters

Not completely true.
----
It's not just the first and last letters. 
----
But it does indicate how to make something <b>unreadable</b>.

Shape Matters 

{{{
m_According m_to m_a m_researcher m_at m_Cambridge 
m_University, m_it m_doesn't m_matter m_in m_what 
m_order m_the m_letters m_in m_a m_word m_are, 
m_the m_only m_important m_thing m_is m_that m_the 
m_first and m_last m_letter m_be m_at m_the m_right 
m_place. m_The m_rest m_can m_be m_a m_total m_mess 
m_and m_you m_can m_still m_read m_it m_without
m_problem. m_This m_is m_because m_the m_human m_mind 
m_does m_not m_read m_every m_letter m_by m_itself, 
m_but m_the m_word m_as m_a m_whole.
}}}
----
So much for Hungarian Notation

Syntax is Shape

You agree with me.
----
Even if you program in C, C# or Java.
----
How do I know that?
----
Tell me the one true way to place my braces:

Braces are Shape

<div style="float:left">
{{{
if (foo) {
  doFoo();
} else {
  doBar();
}
}}}
</div>
<div style="float:left">
{{{
if (foo)
{
   doFoo();
}
else
{
   doBar();
}
}}}
</div>
<div style="float:left">
{{{
if (foo) {
   doFoo();
}
else 
{
   doBar();
}
}}}
</div>


Braces are Shape

Feel free to settle this with fisticuffs in the hall after the session. 

Braces are Shape

Of course, the right answer in C is...
----
{{{
foo ? doFoo() : doBar();
}}}


Python and Whitespace

Defines the shape of the code.
----
{{{
def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while b < n:
        print b,
        a, b = b, a+b
}}}

Python and Whitespace

Hardly a straight jacket
----
{{{>>> def f(
    a,b
            ):
 return (
     a-
             b
     )

>>> f(2,3)
-1
>>>}}}
----
It is possible, but not easy, to write ugly Python code.

Abstractions Matter 

Abstractions shape code.


First-class functions
{{{
>>> def f(x):
    return x*x
}}}----{{{
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
}}}----{{{
>>> map(f, range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
}}}

Keyword parameters

Parameters can be specified by name and not just order.
{{{
>>> def f(a, b):
    return a+b
}}}----{{{
>>> f(b=5, a=7)
12
}}}


Keyword Parameters

{{{
>>> def f(a,b):
    return a+b
----
>>> p = {'a': 10, 'b': 100}
----
>>> f(**p)
110
}}}


Default parameters

Defaults can be supplied for parameters.
{{{
>>> def f(a, b=100):
    return a + b
}}}----{{{
>>> f(2)
102
}}}


Parallel assignment using tuples

A tuple is an immutable list and can be used in assignment.
{{{
>>> a = 1
>>> b = 2
>>> (c, d) = (a+b, a-b)
>>> c
3
>>> d
-1
}}}


Efficient multiple return values

Tuples can also be used to return multiple values.

{{{
>>> def f(a, b):
    return (a-b, a+b)
>>> f(2,3)
(-1, 5)
}}}


Closures

{{{>>> def too_big(limit):
        def compare(x):
            return x > limit
        return compare}}}
----{{{>>> f = too_big(100)
}}}----{{{
>>> f(100)
False
}}}----{{{
>>> f(101)
True
}}}

Meta-programming

{{{
>>> class A:
        b = 3
}}}
----
{{{
>>> a = A()
>>> a.b
3
}}}

Meta-programming
{{{
>>> def f(self, a):
        return a + self.b
}}}
----
{{{
>>> A.fred = f
}}}
----
{{{
>>> a.fred(4)
7
}}}



By Example

URI dispatching in Django.
{{{
"/article/(?P&lt;year>\d{4})/$"  
----
      -->   yearly_archives(year)
----
"/tag/(?P&lt;tag>\w+)/$" 

      --> topic_archives(tag)
}}}


Example

{{{
def yearly_archives(year):
    print "The archives from %s" % year 

def topic_archives(tag):
    print "Articles tagged with %s" % tag
}}}


Selector

{{{
selector = [
  ("/article/(?P&lt;year>\d{4})/$", yearly_archives),
  ("/tag/(?P&lt;tag>\w+)/$", topic_archives)
]
}}}


Dispatch

{{{
>>> dispatch(selector, "/article/2006")
The archives from 2006
}}}


Implementation

{{{
import re

def dispatch(selector, uri):               
    for (regex, callable) in selector:     
        match = re.search(regex, uri)
        if match:
            callable(**match.groupdict())  
            break
}}}


Implementation

{{{
import re

<b class="high">def dispatch(selector, uri):               </b>
    for (regex, callable) in selector:     
        match = re.search(regex, uri)
        if match:
            callable(**match.groupdict()) 
            break
}}}

Selector is an array of ''tuples''. Those
tuples contain ''first class functions''.


Implementation

{{{
import re

def dispatch(selector, uri):               
<b class="high">    for (regex, callable) in selector:     </b>
        match = re.search(regex, uri)
        if match:
            callable(**match.groupdict()) 
            break
}}}

Tuples used in parallel assignment.


Implementation

{{{
import re

def dispatch(selector, uri):               
    for (regex, callable) in selector:     
        match = re.search(regex, uri)
        if match:
<b class="high">            callable(**match.groupdict())</b>
            break
}}}

Keyword parameters.



Laws of Simplicity

[http://lawsofsimplicity.com Laws of Simplicity]

{{{
Reduce Organize Time Learn

Differences Context Emotion 

Trust Failure The One
}}}


Reduce
----
No semicolons
----
No {}'s
----
No compiling


Organize
----
Shape---- (Whitespace)
----
Shape (Abstractions)


Time
----
Less typing
----
Skip the compile


The One

"Simplicity is about subtracting the obvious, and adding the meaningful."

{{{
import re

def dispatch(selector, uri):               
    for (regex, callable) in selector:     
        match = re.search(regex, uri)
        if match:
            callable(**match.groupdict())  
            break
}}}


Web Frameworks

Python has a lot of them.
----
Why?
----
Too easy to build


Components
{{{
Templating: ---- [http://kid-templating.org/ Kid] ----

SQL:        ---- [http://www.sqlalchemy.org/ SQLAlchemy] ----

Routing:    ---- [http://lukearno.com/projects/selector/ Selector] ----

Glue:       ---- [http://www.python.org/dev/peps/pep-0333/ WSGI]
}}}


WSGI

{{{
<span class="PreProc">from</span> wsgiref.simple_server <span class="PreProc">import</span> WSGIServer, WSGIRequestHandler

<span class="Statement">def</span> <span class="Identifier">simple_app</span>(environ, start_response):
    start_response(<span class="Normal">'</span><span class="Constant">200 OK</span><span class="Normal">'</span>, [(<span class="Normal">'</span><span class="Constant">Content-type</span><span class="Normal">'</span>,<span class="Normal">'</span><span class="Constant">text/html</span><span class="Normal">'</span>)])
    <span class="Statement">return</span> [<span class="Normal">'</span><span class="Constant">&lt;h1&gt;Hello World&lt;/h1&gt;</span><span class="Normal">'</span>]


httpd = WSGIServer((<span class="Normal">""</span>, 8080), WSGIRequestHandler)
httpd.set_app(simple_app)
<span class="Statement">print</span> <span class="Normal">&quot;</span><span class="Constant">Serving HTTP on %s port %s ...</span><span class="Normal">&quot;</span> % httpd.socket.getsockname()
httpd.serve_forever()
}}}


WSGI

{{{
<span class="PreProc">from</span> wsgiref.simple_server <span class="PreProc">import</span> WSGIServer, WSGIRequestHandler

<b class="high"><span class="Statement">def</span> <span class="Identifier">simple_app</span>(environ, start_response):</b>
    start_response(<span class="Normal">'</span><span class="Constant">200 OK</span><span class="Normal">'</span>, [(<span class="Normal">'</span><span class="Constant">Content-type</span><span class="Normal">'</span>,<span class="Normal">'</span><span class="Constant">text/html</span><span class="Normal">'</span>)])
    <span class="Statement">return</span> [<span class="Normal">'</span><span class="Constant">&lt;h1&gt;Hello World&lt;/h1&gt;</span><span class="Normal">'</span>]


httpd = WSGIServer((<span class="Normal">""</span>, 8080), WSGIRequestHandler)
httpd.set_app(simple_app)
<span class="Statement">print</span> <span class="Normal">&quot;</span><span class="Constant">Serving HTTP on %s port %s ...</span><span class="Normal">&quot;</span> % httpd.socket.getsockname()
httpd.serve_forever()
}}}

A WSGI application is a callable object that supports this signature.


WSGI

{{{
<span class="PreProc">from</span> wsgiref.simple_server <span class="PreProc">import</span> WSGIServer, WSGIRequestHandler

<span class="Statement">def</span> <span class="Identifier">simple_app</span>(environ, start_response):
    <b class="high">start_response(<span class="Normal">'</span><span class="Constant">200 OK</span><span class="Normal">'</span>, [(<span class="Normal">'</span><span class="Constant">Content-type</span><span class="Normal">'</span>,<span class="Normal">'</span><span class="Constant">text/html</span><span class="Normal">'</span>)])</b>
    <span class="Statement">return</span> [<span class="Normal">'</span><span class="Constant">&lt;h1&gt;Hello World&lt;/h1&gt;</span><span class="Normal">'</span>]


httpd = WSGIServer((<span class="Normal">""</span>, 8080), WSGIRequestHandler)
httpd.set_app(simple_app)
<span class="Statement">print</span> <span class="Normal">&quot;</span><span class="Constant">Serving HTTP on %s port %s ...</span><span class="Normal">&quot;</span> % httpd.socket.getsockname()
httpd.serve_forever()
}}}

Start_response() sets the status code and any response headers.


WSGI

{{{
<span class="PreProc">from</span> wsgiref.simple_server <span class="PreProc">import</span> WSGIServer, WSGIRequestHandler

<span class="Statement">def</span> <span class="Identifier">simple_app</span>(environ, start_response):
    start_response(<span class="Normal">'</span><span class="Constant">200 OK</span><span class="Normal">'</span>, [(<span class="Normal">'</span><span class="Constant">Content-type</span><span class="Normal">'</span>,<span class="Normal">'</span><span class="Constant">text/html</span><span class="Normal">'</span>)])
    <b class="high"><span class="Statement">return</span> [<span class="Normal">'</span><span class="Constant">&lt;h1&gt;Hello World&lt;/h1&gt;</span><span class="Normal">'</span>]</b>


httpd = WSGIServer((<span class="Normal">""</span>, 8080), WSGIRequestHandler)
httpd.set_app(simple_app)
<span class="Statement">print</span> <span class="Normal">&quot;</span><span class="Constant">Serving HTTP on %s port %s ...</span><span class="Normal">&quot;</span> % httpd.socket.getsockname()
httpd.serve_forever()
}}}

The return from the callable is an iterable.


WSGI

Most of that is true.
----
There are details.
----
Read PEP 333 for all the details.
----
For example: Middleware


Model

Model/View/Controller
----
Model/View/'''Template/Dispatcher'''


Model

{{{
                     +-> Model
 Disptacher -> View -+
                     +-> Template
}}}


File Layout

model.py
----
view.py
----
urls.py
----
templates/*


model.py

{{{
<span class="PreProc">from</span> sqlalchemy <span class="PreProc">import</span> Table, Column, String

<span class="PreProc">import</span> dbconfig

entry_table = Table(<span class="Normal">'</span><span class="Constant">entry</span><span class="Normal">'</span>, dbconfig.metadata,
             Column(<span class="Normal">'</span><span class="Constant">id</span><span class="Normal">'</span>, String(100), primary_key=True),
             Column(<span class="Normal">'</span><span class="Constant">title</span><span class="Normal">'</span>, String(100)),
             Column(<span class="Normal">'</span><span class="Constant">content</span><span class="Normal">'</span>, String(30000)),
             Column(<span class="Normal">'</span><span class="Constant">updated</span><span class="Normal">'</span>, String(20), index=True)
         )
}}}


dbconfig.py

{{{
<span class="PreProc">from</span> sqlalchemy <span class="PreProc">import</span> *

metadata = BoundMetaData(<span class="Normal">'</span><span class="Constant">sqlite:///tutorial.db</span><span class="Normal">'</span>)
}}}


manage.py

{{{
<span class="PreProc">import</span> os, sys

<span class="Statement">def</span> <span class="Identifier">create</span>():
    <span class="PreProc">from</span> sqlalchemy <span class="PreProc">import</span> Table
    <span class="PreProc">import</span> model
    <span class="Statement">for</span> (name, table) <span class="Statement">in</span> vars(model).iteritems():
        <span class="Statement">if</span> isinstance(table, Table):
            table.create()


<span class="Statement">if</span> __name__ == <span class="Normal">"</span><span class="Constant">__main__</span><span class="Normal">"</span>:
   <span class="Statement">if</span> <span class="Normal">'</span><span class="Constant">create</span><span class="Normal">'</span> <span class="Statement">in</span> sys.argv:
        create()
}}}


Create tables

{{{
$ python manage.py create
}}}


urls.py

{{{
<span class="PreProc">import</span> selector
<span class="PreProc">import</span> view

urls = selector.Selector()
urls.add(<span class="Normal">'</span><span class="Constant">/blog/</span><span class="Normal">'</span>, GET=view.list)
urls.add(<span class="Normal">'</span><span class="Constant">/blog/{id}/</span><span class="Normal">'</span>, GET=view.member_get)
}}}


view.py

{{{
<span class="PreProc">import</span> robaccia
<span class="PreProc">import</span> model

<span class="Statement">def</span> <span class="Identifier">list</span>(environ, start_response):
    rows = model.entry_table.select().execute()
    <span class="Statement">return</span> robaccia.render(start_response, <span class="Normal">'</span><span class="Constant">list.html</span><span class="Normal">'</span>, locals())


<span class="Statement">def</span> <span class="Identifier">member_get</span>(environ, start_response):
    id = environ[<span class="Normal">'</span><span class="Constant">selector.vars</span><span class="Normal">'</span>][<span class="Normal">'</span><span class="Constant">id</span><span class="Normal">'</span>]
    row = model.entry_table.select(model.entry_table.c.id==id
                                  ).execute().fetchone()
    <span class="Statement">return</span> robaccia.render(start_response, <span class="Normal">'</span><span class="Constant">entry.html</span><span class="Normal">'</span>, locals())
...
}}}



robaccia.py
{{{
<span class="Statement">def</span> <span class="Identifier">render</span>(start_response, template_file, vars):
    ext = template_file.rsplit(<span class="Normal">"</span><span class="Constant">.</span><span class="Normal">"</span>)
    contenttype = <span class="Normal">"</span><span class="Constant">text/html</span><span class="Normal">"</span>
    <span class="Statement">if</span> len(ext) &gt; 1 <span class="Statement">and</span> (ext[1] <span class="Statement">in</span> extensions):
        contenttype = extensions[ext[1]]

    template = kid.Template(file=os.path.join(
       <span class="Normal">'</span><span class="Constant">templates</span><span class="Normal">'</span>, template_file), **vars)
    body = template.serialize(encoding=<span class="Normal">'</span><span class="Constant">utf-8</span><span class="Normal">'</span>)

    start_response(<span class="Normal">"</span><span class="Constant">200 OK</span><span class="Normal">"</span>, [(<span class="Normal">'</span><span class="Constant">Content-Type</span><span class="Normal">'</span>, contenttype)])
    <span class="Statement">return</span> [body]

}}}


templates/list.html

{{{
<span class="Identifier">&lt;?xml </span><span class="Type">version</span><span class="Identifier">=</span><span class="Constant">"1.0"</span><span class="Identifier"> encoding=</span><span class="Constant">"utf-8"</span><span class="Identifier">?&gt;</span>
<span class="Identifier">&lt;</span><span class="Statement">html</span><span class="Identifier"> xmlns:py=</span><span class="Constant">"http://purl.org/kid/ns#&gt;"</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;</span><span class="Statement">head</span><span class="Identifier">&gt;</span>
<span class="PreProc">    </span><span class="Identifier">&lt;</span><span class="Statement">title</span><span class="Identifier">&gt;</span><span class="Title">A Robaccia Blog</span><span class="Identifier">&lt;/</span><span class="Statement">title</span><span class="Identifier">&gt;</span><span class="PreProc"> </span>
<span class="PreProc">  </span><span class="Identifier">&lt;/</span><span class="Statement">head</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;</span><span class="Statement">div</span><span class="Identifier"> py:</span><span class="Type">for</span><span class="Identifier">=</span><span class="Constant">"row in rows.fetchall()"</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">h2</span><span class="Identifier">&gt;</span><span class="Title">${row.title}</span><span class="Identifier">&lt;/</span><span class="Statement">h2</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">div</span><span class="Identifier">&gt;</span>${row.content}<span class="Identifier">&lt;/</span><span class="Statement">div</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">p</span><span class="Identifier">&gt;&lt;</span><span class="Statement">a</span><span class="Identifier"> </span><span class="Type">href</span><span class="Identifier">=</span><span class="Constant">"./${row.id}/"</span><span class="Identifier">&gt;</span><span class="Underlined">${row.updated}</span><span class="Identifier">&lt;/</span><span class="Statement">a</span><span class="Identifier">&gt;&lt;/</span><span class="Statement">p</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;/</span><span class="Statement">div</span><span class="Identifier">&gt;</span>
<span class="Identifier">&lt;/</span><span class="Statement">html</span><span class="Identifier">&gt;</span>
}}}


manage.py

{{{
<span class="Statement">def</span> <span class="Identifier">run</span>():
    <span class="PreProc">import</span> urls
    <span class="PreProc">from</span> wsgiref.simple_server <span class="PreProc">import</span> WSGIServer, WSGIRequestHandler
    httpd = WSGIServer((<span class="Normal">""</span>, 8080), WSGIRequestHandler)
    httpd.set_app(urls.urls)
    <span class="Statement">print</span> <span class="Normal">"</span><span class="Constant">Serving HTTP on %s port %s ...</span><span class="Normal">"</span> % httpd.socket.getsockname()
    httpd.serve_forever()

<span class="Statement">if</span> __name__ == <span class="Normal">"</span><span class="Constant">__main__</span><span class="Normal">"</span>:
   <span class="Statement">if</span> <span class="Normal">'</span><span class="Constant">create</span><span class="Normal">'</span> <span class="Statement">in</span> sys.argv:
        create()
   <span class="Statement">if</span> <span class="Normal">'</span><span class="Constant">run</span><span class="Normal">'</span> <span class="Statement">in</span> sys.argv:
        run()
}}}


Running

{{{
$ python manage.py run
Serving HTTP on 0.0.0.0 port 8080 ...
}}}


main.cgi

{{{
#!/usr/bin/python

import manage
manage.run()
}}}


Touch Points

How much special glue code did we need for:
----
Template (Kid)  <-> Model (SQLAlchemy)
----
View <-> Dispatch (Selector)
---- 
Dispatch (Selector) <-> Model
----
{{{id = environ['selector.vars']['id']}}}


Development Environment



=== VI + F5


What is simple

The underlying technologies are ''close to the surface''



SQL

SQLAlchemy 
----
'Just' a wrapper around SQL, not an object persistence layer.
----
You can even get 'closer' to the SQL.
----
{{{
t = engine.text("select foo from mytable where lala=:hoho")
r = t.execute(hoho=7)
}}}


HTML

Kid template is XHTML.
----
{{{
<span class="Identifier">&lt;?xml </span><span class="Type">version</span><span class="Identifier">=</span><span class="Constant">"1.0"</span><span class="Identifier"> encoding=</span><span class="Constant">"utf-8"</span><span class="Identifier">?&gt;</span>
<span class="Identifier">&lt;</span><span class="Statement">html</span><span class="Identifier"> xmlns:py=</span><span class="Constant">"http://purl.org/kid/ns#&gt;"</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;</span><span class="Statement">head</span><span class="Identifier">&gt;</span>
<span class="PreProc">    </span><span class="Identifier">&lt;</span><span class="Statement">title</span><span class="Identifier">&gt;</span><span class="Title">A Robaccia Blog</span><span class="Identifier">&lt;/</span><span class="Statement">title</span><span class="Identifier">&gt;</span><span class="PreProc"> </span>
<span class="PreProc">  </span><span class="Identifier">&lt;/</span><span class="Statement">head</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;</span><span class="Statement">div</span><span class="Identifier"> py:</span><span class="Type">for</span><span class="Identifier">=</span><span class="Constant">"row in rows.fetchall()"</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">h2</span><span class="Identifier">&gt;</span><span class="Title">${row.title}</span><span class="Identifier">&lt;/</span><span class="Statement">h2</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">div</span><span class="Identifier">&gt;</span>${row.content}<span class="Identifier">&lt;/</span><span class="Statement">div</span><span class="Identifier">&gt;</span>
     <span class="Identifier">&lt;</span><span class="Statement">p</span><span class="Identifier">&gt;&lt;</span><span class="Statement">a</span><span class="Identifier"> </span><span class="Type">href</span><span class="Identifier">=</span><span class="Constant">"./${row.id}/"</span><span class="Identifier">&gt;</span><span class="Underlined">${row.updated}</span><span class="Identifier">&lt;/</span><span class="Statement">a</span><span class="Identifier">&gt;&lt;/</span><span class="Statement">p</span><span class="Identifier">&gt;</span>
  <span class="Identifier">&lt;/</span><span class="Statement">div</span><span class="Identifier">&gt;</span>
<span class="Identifier">&lt;/</span><span class="Statement">html</span><span class="Identifier">&gt;</span>
}}}


Routing

Selector is just a piece of WSGI middleware.
----
View is just a WSGI application.
----
WSGI keeps you 'close' to HTTP.


Domain Specific Languages

Languages used in preparing this presentation:
----
HTML
----
CSS
----
Python
----
WikiML

Domain Specific Languages

<iframe src="notes"/>

