<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com)
     by Daniel M Kohn (private) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://bitworking.org/rfc/reference.RFC.2119.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xml' ?>   

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="yes" ?>
<?rfc strict="yes" ?>
<!-- 
   1. Update the docName
   2. Update the date
   3. Update the Revision History.
-->
<rfc category="std" ipr="full2026" docName="draft-gregorio-03.html">
    <front>
        <title>The EchoAPI</title>
        <author initials='J.C.' surname="Gregorio" fullname='Joe Gregorio'>
            <organization>BitWorking, Inc</organization>
	        <address>
		<postal>
		    <street>1002 Heathwood Dairy Rd.</street>
		    <city>Apex</city> <region>NC</region> <code>27502</code>
		    <country>US</country>
		</postal>
		<phone>+1 919 272 3764</phone>
		<email>joe@bitworking.com</email>
		<uri>http://bitworking.com/</uri>
                </address>
        </author>
        <date day="9" month="July" year="2003"/>
        <abstract><t>This memo presents a technique for 
	  using XML (Extensible Markup Language) and HTTP (HyperText Transport Protocol)
	  to edit content. </t>

	  <t>To provide feedback on this draft RFC 
	    please visit the <eref target="http://www.intertwingly.net/wiki/pie/RestEchoApiDiscuss">Echo Wiki</eref>.
	    </t>
	</abstract>
    </front>

    <middle>

        <section title="Introduction">
           <t>EchoAPI is an application level protocol for publishing, and editing web resources. 
              EchoAPI unifies many disparate publishing mechanisms into a single, simple, 
              extensible protocol. The protocol at its core is the HTTP transport of an XML payload. 
           </t>

	  <t>To provide feedback on this draft RFC 
	    please visit the <eref target="http://www.intertwingly.net/wiki/pie/RestEchoApiDiscuss">Echo Wiki</eref>.
	    </t>
       </section>

       <section title="Terminology">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",the 
            and "OPTIONAL" in this document are to be interpreted as
            described in RFC2119.</t>
       </section>

       <section title="Scope">
            <t>This document covers the editing of content of a periodically updating website using the 
               HTTP and XML. Many of the XML payloads are in Echo format, which will not be documented here.
            </t>
            <t>This specification will mirror some of the functionality of the <eref target="http://www.blogger.com/developers/api/documentation20.html">Blogger 2.0 API</eref>, which
               includes support for the <eref target="http://scripts.incutio.com/xmlrpc/introspection.html">Server Introspection API</eref>.
            </t>
       </section>

       <section title="The EchoAPI Model">
          <section title="Introspection">
            <t>When editing the content of the website http://example.org/reilly, the first thing to do is find out the 
               servers capabilites. Each server may only implement a subset of this specification, and the 'introspection' file
               lists all the functions that each site supports. This mirrors the <eref target="http://scripts.incutio.com/xmlrpc/introspection.html">Server Introspection API</eref>
               used by the Blogger 2.0 API. 
            </t>

            <figure>
                 <artwork><![CDATA[
<?xml version="1.0" encoding='iso-8859-1'?>
<introspection> 
  <edit-entry>http://example.org/reilly/</edit-entry>
  <user-prefs>http://example.org/reilly/prefs</user-prefs>
  <search-entries>http://example.org/reilly/search</search-entries>
</introspection>  ]]></artwork>
            </figure>

            <figure>
                 <preamble>This site furnishes only a minimal set of functionality. A more full featured site might return:</preamble>
                 <artwork><![CDATA[
<?xml version="1.0" encoding='iso-8859-1'?>
<introspection> 
  <edit-entry>http://example.org/reilly/</edit-entry>
  <user-prefs>http://example.org/reilly/prefs</user-prefs>
  <search-entries>http://example.org/reilly/search</search-entries>
  <edit-template>http://example.org/reilly/templates</edit-template>
  <categories>http://example.org/reilly/categories</categories>
</introspection>                  ]]></artwork>
            </figure>

	     <t>Where to store the introspection file on the web 
	       and how to make the URI of the introspection file 
	       easy to find will be discussed later.
             </t>

             <t>This particular introspection file for http://example.org/reilly tells us 
	        that the EchoAPI implementation supports both the 'edit-entry' and the 'user-prefs'
                interfaces, and it also specifies the URIs to use for each of these interfaces. </t>
	     <t>Note that the example URIs given are not normative, nor are
                there any constraints on the 
                URIs that can be specified. The 'edit-entry' URI could just have easily been: </t>

             <figure>
                 <artwork><![CDATA[
http://dev.example.net/api?userid=reilly&amp;action=edit]]></artwork>
             </figure>

	     </section>
             <section title="Creating a new Entry request">
               <t>HTTP POST is used for content creation. The new content is 
		 formatted as an Echo Entry and then POSTed to the URI given in the 
		 &lt;edit-entry/> element of the Introspection file.</t>
               <figure>
                 <preamble>To create a new Entry on the site the client connects to port 80 
	           on http://example.org and sends:</preamble>
                 <artwork><![CDATA[
POST /reilly HTTP/1.1
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<entry> 
    <title>My First Entry</title> 
    <subtitle>In which a newbie learns to blog...</subtitle> 
    <summary>A very boring entry...</summary> 
 
    <author> 
      <name>Bob B. Bobbington</name> 
      <homepage>http://bob.name/</homepage> 
      <weblog>http://bob.blog/</weblog> 
    </author> 

    <issued>2003-02-05T12:29:29</issued> 
 
    <content type="application/xhtml+xml" xml:lang="en-us"> 
      <p xmlns="...">Hello, <em>weblog</em> world! 2 &lt; 4!</p> 
    </content>  
</entry> ]]></artwork>
                 <postamble>This would create a new weblog Entry 
		   with the title "My First Entry". </postamble>
               </figure>
	       
	       <figure>
                 <preamble>Assuming everything goes well and the Entry is created
		   the response might look like:</preamble>
                 <artwork><![CDATA[HTTP/1.1 201 Created
Location: http://example.org/reilly/1]]></artwork>
               </figure>

               <t>The URI of the filled in Entry is returned via the HTTP headers. 
		   If a GET is done on the URI then a filled in Entry would be returned, including the 
                   elements &lt;link/>, &lt;id/>, &lt;created/>' and &lt;modified/>.</t>

	       <section title="Retrieving an Entry" anchor="Model_Get">
               <figure>
               <preamble>To retreive the new Entry on the site the client connects 
	         to port 80 on http://example.org and sends:</preamble>
                 <artwork><![CDATA[GET /reilly/1 HTTP/1.1
Content-Type: application/not-echo+xml ]]></artwork>
                 <postamble>This would retrieve the Entry just created. </postamble>
             </figure>

	     <figure>
               <preamble>The response might look like:</preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 Ok
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<entry> 
    <title>My First Entry</title> 
    <subtitle>In which a newbie learns to blog...</subtitle> 
    <summary>A very boring entry...</summary> 
 
    <author> 
      <name>Bob B. Bobbington</name> 
      <homepage>http://bob.name/</homepage> 
      <weblog>http://bob.blog/</weblog> 
    </author> 

    <issued>2003-02-05T12:29:29</issued> 
    <created>2003-02-05T14:10:58Z</created> 
    <modified>2003-02-05T14:10:58Z</modified> 
    
    <link>http://example.org/reilly/2003/02/05#My_First_Entry</link>
    <id>urn:example.org:reilly:1</id>
 
    <content type="application/xhtml+xml" xml:lang="en-us"> 
      <p xmlns="...">Hello, <em>weblog</em> world! 2 &lt; 4!</p> 
    </content>  
</entry> ]]></artwork>
                 <postamble>Information has been added to the Entry, including the &lt;link/>, &lt;id/>, &lt;created/> and &lt;modified/> elements.</postamble>
             </figure>

             <t>@@ Editors Note: Beware the Echo syntax is still in flux and the above example is not normative. @@</t>
            </section>
           </section><!-- Creating a new Entry  -->

           <section title="Editing an entry">
	     <t>Editing an Entry is the same as creating one, the difference is that the Entry you POST already
                has 'id' filled in. The modified Echo Entry is POSTed to the same URI used to create an entry, that is, 
                the URI stored in the &lt;create-entry/> element of the Introspection file.
             </t>

	     <figure>
               <preamble>If the &lt;content/> element is updated 
	         the transaction might look like:</preamble>
                 <artwork><![CDATA[
POST /reilly HTTP/1.1
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<entry> 
    <title>My First Entry</title> 
    <subtitle>In which a newbie learns to blog...</subtitle> 
    <summary>A very boring entry...</summary> 
 
    <author> 
      <name>Bob B. Bobbington</name> 
      <homepage>http://bob.name/</homepage> 
      <weblog>http://bob.blog/</weblog> 
    </author> 

    <issued>2003-02-05T12:29:29</issued> 
    <created>2003-02-05T14:10:58Z</created> 
    <modified>2003-02-05T14:10:58Z</modified> 
    
    <link>http://example.org/reilly/2003/02/05#My_First_Entry</link>
    <id>urn:example.org:reilly:1</id>
 
    <content type="application/xhtml+xml" xml:lang="en-us"> 
      <p xmlns="...">A big hello to the 
         <em>weblog</em> world! 2 &lt; 4!</p> 
    </content>  
</entry> ]]></artwork>
                 <postamble>The server knows this is an update instead of
		   creation from the existence of the &lt;id/> element.</postamble>
             </figure>

	     <figure>
               <preamble>The response from the server, on success, returns a 205 HTTP status code.</preamble>
                 <artwork><![CDATA[HTTP/1.1 205 Reset Content
]]></artwork>
                 <postamble>The &lt;content/> element now reflects the updated content, and the &lt;modifed/> element has
		    been updated to reflect when the change was made.</postamble>
             </figure>

             <t>As was done after creation, a GET to the URI of the 
	       Echo Entry would return the modified Entry.</t>
 
               <figure>
               <preamble>To retreive the modified Entry 
	         the client connects to port 80 on http://example.org and sends:</preamble>
                 <artwork><![CDATA[GET /reilly/1 HTTP/1.1
Content-Type: application/not-echo+xml ]]></artwork>
                 <postamble>This would retrieve the recently modified Entry. </postamble>
             </figure>

	     <figure>
               <preamble>The response might look like:</preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 Ok
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<entry> 
    <title>My First Entry</title> 
    <subtitle>In which a newbie learns to blog...</subtitle> 
    <summary>A very boring entry...</summary> 
 
    <author> 
      <name>Bob B. Bobbington</name> 
      <homepage>http://bob.name/</homepage> 
      <weblog>http://bob.blog/</weblog> 
    </author> 

    <issued>2003-02-05T12:29:29</issued> 
    <created>2003-02-05T14:10:58Z</created> 
    <modified>2003-02-05T14:22:03Z</modified> 
    
    <link>http://example.org/reilly/2003/02/05#My_First_Entry</link>
    <id>urn:example.org:reilly:1</id>
 
    <content type="application/xhtml+xml" xml:lang="en-us"> 
      <p xmlns="...">A big hello to the 
         <em>weblog</em> world! 2 &lt; 4!</p> 
    </content>  
</entry> ]]></artwork>
                 <postamble>The &lt;content/> element now reflects the 
		   updated content, and the &lt;modifed/> element has 
		   been updated to reflect when the change was made.</postamble>
             </figure>
           </section>

           <section title="Deleting an entry">
             <t>Deleting an Entry also uses the same 'edit-entry' URI. </t>

	     <figure>
               <preamble>To delete an Entry the client connects to port 80 on the server
                 and sends:</preamble>
                 <artwork><![CDATA[
POST /reilly HTTP/1.1
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<delete id="urn:example.org:reilly:1" /> ]]></artwork>
                 <postamble>The POST handler on the server side uses 
		   the value of the 'id' attribute to determine which 
		   Entry to delete.</postamble>
             </figure>
 
	     <figure>
               <preamble>The response from the server upon a successful deletion is:</preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 Ok ]]></artwork>
             </figure>
           </section>


           <section title="Finding an entry">
             <t>Finding an Entry uses the 'search-entries' URI from the Introspection file. For
	       the example Introspection file given, that is the URI http://example.org/reilly/search.
	       The search parameters given are used to select which Entries are listed
	       in the response.</t>
	     <figure>
               <preamble>For example, to retrieve the locations of the last
	         20 Entries,  the client 
	         connects to port 80 on the server and sends:</preamble>
                 <artwork><![CDATA[
POST /reilly/search HTTP/1.1
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<search>
    <num-entries>20</num-entries>
</search>]]></artwork>
                 <postamble>The POST handler on the server side searches for
		   Entries that match the criteria and returns a 
		   response that lists those matches.</postamble>
             </figure>
 
	     <figure>
               <preamble>The response from the server might look like:</preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 Ok 
Content-Type: application/not-echo+xml

<search-results>
  <match title="My First Post">http://example.org/reilly/1</match>
  <match title="My Second Post">http://example.org/reilly/2</match>
</search-results>]]></artwork>
             </figure>
	     <t>There will be one &lt;match/> element for every Entry that 
	       matches the given criteria. Each &lt;match/> element
	       contains the URI of an Entry and an attribute
	       'title' which contains the title of the Entry. If the
	       client needs the Echo Entry then it performs an
	       HTTP GET on the given URI as outlined in <xref target="Model_Get"/>.</t>
	     <t>There are other search critera that can be added
	       as child elements of &lt;search-results/>. For example,
	       the &lt;all/> element, if present, requests
	       that the server return a list of all Entries on
	       the site. Other additional elements that can be added are
	       &lt;start-range/> and &lt;endRange/>. Access to the entries
	       is by an index, with the first Entry having an index number
	       of 0.</t>

	     <figure>
               <preamble>For example, this request will return a 
	         list of all Entries from index 2 to index 27.</preamble>
                 <artwork><![CDATA[
POST /reilly/search HTTP/1.1
Content-Type: application/not-echo+xml

<?xml version="1.0" encoding='iso-8859-1'?>
<search>
    <start-range>2</start-range>
    <end-range>27</end-range>
</search>
]]></artwork>
             </figure>
	     <t>The rest of the search parameters and their properties
	       are covered in detail in <xref target="Func_Formats"/>.</t>
           </section>


           <section title="Editing User Prefs">
             <t>The preferences for the user are edited through 
	       the URI supplied in the &lt;user-prefs/> element of 
	       the introspection file. To retrieve the current user 
	       preferences issue and HTTP GET on the URI.</t>

             <figure>
               <preamble>For the website at http://example.org/reilly, 
	         the request would look like: </preamble>
                 <artwork><![CDATA[
GET /reilly/prefs HTTP/1.1]]></artwork>
                 <postamble>This would return a list of user 
		   configuration parameters and their values.</postamble>
             </figure>

             <figure>
               <preamble>The reponse would look like: </preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/not-echo+xml
 
<?xml version="1.0" encoding='iso-8859-1'?>
<userprefs xmlns="http://www.purl.org/EchoAPI/UserPrefs/">
   <name>Reilly</name>
   <id>1234</id>
   <email>reilly@example.org</email>
</userprefs>       ]]></artwork>
                 <postamble>The values can then be updated, and doing an 
		   HTTP POST of the updated file back to the 'user-prefs' URI
		   will update the user preferences.</postamble>
             </figure>


             <figure>
               <preamble>For example, if we update our email address, 
	         from reilly@example.org to sputnik@example.org, 
                 we would then POST back to the 'user-prefs' URI: </preamble>
                 <artwork><![CDATA[
POST /reilly/prefs HTTP/1.1
Content-Type: application/not-echo+xml
 
<?xml version="1.0" encoding='iso-8859-1'?>
<userprefs xmlns="http://www.purl.org/EchoAPI/UserPrefs/">
   <name>Reilly</name>
   <id>1234</id>
   <email>sputnik@example.org</email>
</userprefs>]]></artwork>
                 <postamble>Assuming the update goes successfully, 
		   the updated user preferences will be 
		   returned in the response.</postamble>
             </figure>

             <figure>
               <preamble>The reponse would look like: </preamble>
                 <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/not-echo+xml
 
<?xml version="1.0" encoding='iso-8859-1'?>
<userprefs xmlns="http://www.purl.org/EchoAPI/UserPrefs/">
   <name>Reilly</name>
   <id>1234</id>
   <email>sputnik@example.org</email>
</userprefs>       ]]></artwork>
             </figure>

           </section>

           <section title="Adding Comments">
	     <t>This part of the EchoAPI does not use the 
	       URIs listed in the Introspection file.</t>
             <t>There are different interfaces now circulating for 
	       an <eref target="http://www.movabletype.org/docs/mtmanual_trackback.html">TrackBack</eref>, 
	       Ping-Back, Post-It. 
	       All of these are systems for adding comment-like
	       information to an Entry. The only 
	       thing missing from the mix is a way to do 
	       comments themselves. This section of the specification 
	       is intended to be a roll-up of all 
	       the above specifications and to cover comments as well.</t>
             <t>Creating a comment is similar to creating an Entry, 
	       that is, you HTTP POST an Entry to a URI. 
	       For now we will defer discussing how to obtain the 
	       corrent URI to POST to. </t>
             <figure>
               <preamble>For example, if  "http://example.org/reilly/1/comments" is 
	         the URI that accepts comments
	         for the first Entry on the website http://example.org/reilly, 
		 then the client would open port 80 on example.org
		 and send:</preamble>
               <artwork><![CDATA[
POST /reilly/1/comments HTTP/1.1
Content-Type: application/not-echo/xml

<entry> 
  <title>My Comment</title> 
  <author> 
    <name>Fred F. Fobbington</name> 
    <homepage>http://fred.name/</homepage> 
    <weblog>http://fred.blog/</weblog> 
  </author> 
  <issued>2003-02-05T12:29:29</issued> 
  <content type="application/xhtml+xml" xml:lang="en-us"> 
    <p xmlns="...">Welcome to the neighborhood!</p> 
  </content>  
</entry> ]]></artwork>
                 <postamble>This would create a new comment for the
		   first Entry on "http://example.org/reilly".</postamble>
             </figure>

             <figure>
               <preamble>The response to this POST, assuming 
	         everything went without error, is a filled in
	         Echo Entry, and would look like this:</preamble>
               <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/not-echo+xml

<entry> 
  <title>My Comment</title> 
  <author> 
    <name>Fred F. Fobbington</name> 
    <homepage>http://fred.name/</homepage> 
    <weblog>http://fred.blog/</weblog> 
  </author> 
  <issued>2003-02-05T12:29:29</issued> 
  <created>2003-02-05T14:20:12Z</created> 
  <modified>2003-02-05T14:20:12Z</modified> 
    
  <link>http://example.org/reilly/2003/02/05#comment1</link>
  <id>urn:example.org:reilly:1:1</id>
 
  <content type="application/xhtml+xml" xml:lang="en-us"> 
    <p xmlns="...">Welcome to the neighborhood!</p> 
  </content>  
</entry> ]]></artwork>
                 <postamble>This would create a new comment/trackback 
		   for the first Entry on "http://example.org/reilly".</postamble>
             </figure>

             <section title="Comment Auto-Discovery">
               <t>Two mechanisms are available for discovering the 
	         URI that you would use to create a comment.
                 The first is a way to put that information in HTML, 
		 the second is a way to embed that information in an Echo feed.</t>
                 <section title="HTML Auto-Discovery">
                   <t>The &lt;link> element has been successful in finding RSS feeds and is appropriate to 
		     use here for discovering the "commentURI" in HTML pages. The <eref target="http://www.w3.org/TR/html401/struct/links.html#edef-LINK">&lt;link></eref> tag goes in the &lt;head> section 
		     of an HTML page and is used to indicate a document relationship. For a similar example of using the link tag 
		     to discover a URI, refer to the usage of 
		     of the link tag for <eref target="http://diveintomark.org/archives/2002/05/30/rss_autodiscovery.html">RSS Auto-Discovery</eref>.
		     In this case the form of the link tag used to indicate the location of the comment URI is:</t>

                   <figure>
                       <artwork><![CDATA[
<link rel="service.comment" type="application/not-echo+xml" 
      href="url goes here" title="EchoComment">]]></artwork>
                   </figure>

                   <t>Where href should be set to the URI that accepts POSTs for comments. 
		     Applications looking for a URI to post comments
		     to  need to parse out the 
		     headers of the web page and look for a link tag that has a 
		     relation rel of "comment" and a mime-type of "application/not-echo+xml".
		     </t>
                 </section>
                 <section title="Echo Feed Auto-Discovery">
                   <t>There is a &lt;comment/> element in each Entry 
		     that is used to provide the location of the URI that accepts
		     comment POSTs. This is providing the same information 
		     as the link tag does in HTML. 
		     @@ No example yet. Needs to be specified. @@
		   </t>
                 </section>
             </section>
           </section>
           <section title="Introspection Discovery">
             <t>The URI of the Introspection file is discovered 
	       using <eref target="http://archipelago.phrasewise.com/rsd">RSD</eref>. 
	       RSD, which stands for Really Simple Discovery, is used for automatic discovery of 
               supported editing APIs. </t>

                   <figure>
                       <preamble>Here is an RSD file for the website at http://example.org/reilly.</preamble>
                       <artwork><![CDATA[
<?xml version="1.0" ?> 
<rsd version="0.7" xmlns="http://archipelago.phrasewise.com/rsd" >
  <service>
    <engineName>EchoAPI</engineName> 
    <engineLink>http://purl.org/Echo/API</engineLink>
    <homePageLink>http://example.org/reilly</homePageLink>
    <apis>
      <api name="EchoAPI" preferred="true" 
          location="http://example.org/reilly/introspection" 
          blogID="">
      </api>
    </apis>
  </service>
</rsd>]]></artwork>
                       <postamble>Note that RSD also specifies the 
		         inclusion of a &lt;link> tag included in the 
                         header of the website homepage, to aid in 
			 discovery of the RSD file.</postamble>
                   </figure>

 	   </section>
      </section>

      <section title="Functional Specification">
           <section title="Formats" anchor="Func_Formats">
               <t>@@ TBD @@ More formal specification of all the XML formats used in this protocol.</t>
           </section>
           <section title="Actions">
               <t>@@ TBD @@ A more formal specification of all the actions.</t>
               <section title="Create Entry"><t>None.</t></section>
               <section title="Edit Entry"><t>None.</t></section>
               <section title="Delete Entry"><t>None.</t></section>
               <section title="Get List of Entries"><t>None.</t></section>
               <section title="Get User Info"><t>None.</t></section>
               <section title="Set User Info"><t>None.</t></section>
               <section title="Get Categories"><t>None.</t></section>
               <section title="Set Categories"><t>None.</t></section>
           <section title="Result Codes">
               <t>@@TBD@@  Mostly 200 for normal responses, seems that 30X codes for redirects are
                  useful but might make implementations a little harder to implement. @@Ref CommentAPI problems returning a 303 vs 200@@</t>
           </section>
           <section title="Content">
               <t>@@TBD@@ How does an Echo document change when used in these different contexts? Which parts that 
are required when found in a feed become optional when used in creating an Entry?</t>
           </section>
           </section>
        </section>

        <section title="Security Considerations">
        <t>@@TBD@@ Talk here about using HTTP basic and digest authentication.</t>
        <t>@@TBD@@ Talk here about denial of service attacks using large XML files, or the billion laughs DTD attack.</t>
        </section>
        <section title="Revision History">
             <t>10Jul2003 - Added a link to the Wiki near the front of the 
	       document. Added a section on finding an Entry. Retrieving an Entry
	       now broken out into it's own section. Changed the HTTP status code for
	       a successful editing of an Entry to 205.
	     </t>
             <t>7Jul2003 - Entries are no longer returned from POSTs, instead they are retrieved via GET.
	       Cleaned up figure titles, as they are rendered poorly in HTML. All content-types 
	       have been changed to application/not-echo+xml.
	     </t>
	     <t>5Jul2003 - Renamed from EchoAPI.html to follow the more commonly used format: draft-gregorio-NN.html. Renamed all 
                references to URL to URI. Broke out introspection into it's own section. Added the Revision History section.
                Added more to the warning that the example URIs are not normative.
             </t>
        </section>
    </middle>

    <back>
        <references>&rfc2119;</references>
    </back>

</rfc>






