<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes" ?><?rfc symrefs="yes" ?><?rfc sortrefs="yes"?><?rfc iprnotified="yes" ?><?rfc strict="yes" ?><?rfc compact="no" ?><?rfc comments="yes" ?><?rfc inline="yes" ?><?rfc tocdepth="3" ?><rfc category="std" ipr="full3978" xml:lang="en" obsoletes="" docName="draft-ietf-atompub-protocol-10.txt" updates="">
        <front>
            <title>The Atom Publishing Protocol</title>
            <author role="editor" fullname="Joe Gregorio" surname="Gregorio" initials="J.C.">
                <organization>IBM</organization>
                <address>
                    <postal>
                        <street>4205 South Miama Blvd.</street>
                        <city>Research Triangle Park</city> <region>NC</region> <code>27709</code>
                        <country>US</country>
                    </postal>
                    <phone>+1 919 272 3764</phone>
                    <email>joe@bitworking.org</email>
                    <uri>http://ibm.com/</uri>
                </address>
            </author>
            <author role="editor" fullname="Bill de hOra" surname="de hOra" initials="B.">
                <organization>Propylon Ltd.</organization>
                <address>
                    <postal>
                        <street>45 Blackbourne Square, Rathfarnham Gate</street>
                        <city>Dublin</city> <region>Dublin</region> <code>D14</code>
                        <country>IE</country>
                    </postal>
                    <phone>+353-1-4927444</phone>
                    <email>bill.dehora@propylon.com</email>
                    <uri>http://www.propylon.com/</uri>
                </address>
            </author>

            <date year="2006" day="05" month="September"></date>
            <abstract>

                <t>The Atom Publishing Protocol (APP) is an application-level
                protocol for publishing and editing Web
                resources. The protocol is based on HTTP transport of
                Atom-formatted representations. The Atom format is documented in
                the Atom Syndication Format (RFC4287).
                </t>

            </abstract>

            <note title="Editorial Note">
                <t>To provide feedback on this Internet-Draft, join the <eref target="http://www.imc.org/atom-protocol/index.html">atom-protocol mailing
                        list (http://www.imc.org/atom-protocol/index.html)</eref>.
                </t>
            </note>
        </front>

        <middle>

            <section toc="default" title="Introduction">

                <t>The Atom Publishing Protocol is an application-level
                    protocol for publishing and editing Web resources using HTTP
                    <xref target="RFC2616" pageno="false" format="default"></xref> and XML 1.0 <xref target="W3C.REC-xml-20040204" pageno="false" format="default"></xref>. The protocol supports the creation of arbitrary web resources and
                    provides facilities for:</t>

<t>
                <list style="symbols">
                    <t>Collections: Sets of resources, which can be retrieved in whole or in part.</t>
                    <t>Service: Discovering and describing Collections.</t>
                    <t>Editing: Creating, updating and deleting resources.</t>
                </list>
</t>

            </section>

            <section toc="default" title="Notational Conventions">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
                    "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
                    and "OPTIONAL" in this document are to be interpreted as
                    described in <xref target="RFC2119" pageno="false" format="default"></xref>.
                </t>

    <t>Atom Protocol documents allow the use of IRIs <xref target="RFC3987" pageno="false" format="default"></xref>, as well as URIs <xref target="RFC3986" pageno="false" format="default"></xref>.
        Before an IRI found in a document is used by
        HTTP, the IRI is first converted to a URI according the procedure defined
        in <xref target="RFC3987" pageno="false" format="default"></xref> (Section 3.1). The resource identified by the URI after conversion is the same
        as the one identified by the IRI.
    </t>

            <section toc="default" anchor="xml-conv" title="XML-related Conventions">


    <section toc="default" anchor="i-items" title="Referring to Information Items">

     <t>Atom Protocol Document formats are specified in terms of the XML
     Information Set <xref target="W3C.REC-xml-infoset-20040204" pageno="false" format="default"></xref>, serialized
     as XML 1.0 <xref target="W3C.REC-xml-20040204" pageno="false" format="default"></xref>.</t>
                    <t>The Infoset terms "Element Information Item" and "Attribute Information Item"
                    are shortened to "element" and "attribute" respectively.
                    Therefore, when this specification uses the term "element",
                    it is referring to an Element Information Item, and when it uses the term "attribute", it is
                    referring to an Attribute Information Item.  </t></section>

    <section toc="default" title="RELAX NG Schema">
                <t>
                    Some sections of this specification are illustrated with
                    fragments of a non-normative RELAX NG Compact schema <xref target="RNC" pageno="false" format="default"></xref>.  However, the text of this specification
                    provides the definition of conformance.  Complete schemas
                    appear in <xref target="schema" pageno="false" format="default"></xref>.  </t></section>


     <section toc="default" anchor="baselang" title="Use of xml:base and xml:lang">

         <t>XML elements defined by this specification MAY have an xml:base
         attribute <xref target="W3C.REC-xmlbase-20010627" pageno="false" format="default"></xref>. When xml:base is
         used, it serves the function described in section 5.1.1 of URI Generic Syntax <xref target="RFC3986" pageno="false" format="default"></xref>, by establishing the base URI (or IRI) for resolving
         relative references found within the scope of the
         xml:base attribute. </t>

         <t>Any element defined by this specification MAY have an xml:lang
         attribute, whose content indicates the natural language for the element
         and its descendents. The language context is only significant for
         elements and attributes declared to be "Language-Sensitive" by this
         specification. Requirements regarding the content and interpretation of
         xml:lang are specified in Section 2.12 of XML 1.0 <xref target="W3C.REC-xml-20040204" pageno="false" format="default"></xref>.

          </t>

     </section>


            </section>




            </section>

            <section toc="default" anchor="terminology" title="Terminology">

                <t>For convenience, this protocol can be referred to as the "Atom Protocol"
    or "APP".
                </t>

                <t>URI/IRI - A Uniform Resource Identifier and Internationalized
                Resource Identifier.  These terms and the
                distinction between them are defined in <xref target="RFC3986" pageno="false" format="default"></xref> and <xref target="RFC3987" pageno="false" format="default"></xref>. IRIs are
                mapped to URIs before dereferencing takes place.
                </t>

                <t>The phrase "the URI of a document" in this specification is
                shorthand for "a URI which, when dereferenced, is expected to
                produce that document as a representation".
                </t>

                <t>Resource - A network-accessible data object or
    service
                identified by an IRI, as defined in <xref target="RFC2616" pageno="false" format="default"></xref>. See
                <xref target="W3C.REC-webarch-20041215" pageno="false" format="default"></xref> for further discussion
                on resources.
                </t>


                <t>Representation - An entity included with a request or
                response as defined in <xref target="RFC2616" pageno="false" format="default"></xref>.
                </t>

                <t>Collection - A resource that contains a set of Member IRIs.
                See <xref target="collection_resource" pageno="false" format="default"></xref>.
                </t>

                <t>Member - A resource whose IRI is listed in a Collection
                    by a link element with a relation of "edit" or "edit-media".  See
                    <xref target="memuri" pageno="false" format="default"></xref>.
                </t>

                <t>Workspace - A group of collections. See <xref target="appdocs" pageno="false" format="default"></xref>.
                </t>

                <t>Service Document - A document that describes the
                location and capabilities of one or more Collections.  See <xref target="appdocs" pageno="false" format="default"></xref>.</t>

                <t>Category Document - A document that describes the categories
                allowed in a Collection.  See <xref target="catdocs" pageno="false" format="default"></xref>.
                </t>


            </section>


            <section toc="default" title="Protocol Model">

                <t>
                    The Atom Publishing Protocol uses HTTP methods to edit and
                    author Member Resources as follows:
                </t>
                <t>
                    <list style="symbols">
                        <t>GET is used to retrieve a representation of a
                        known resource.</t>
                        <t>POST is used to create a new, dynamically-named,
                        resource.</t>
                        <t>PUT is used to update a known resource.</t>
                        <t>DELETE is used to remove a known resource.</t>
                    </list>

                </t>
                <t>
                    Along with operations on Member Resources the Atom Protocol defines
                    Collection resources for managing and organizing Member Resources.
                    Collections are represented by Atom Feed documents and contain the
                    IRIs of, and metadata about, their Member Resources.
                </t>
                <t>
                    There are two kinds of Member Resources - Member Entry
                    Resources and Media Resources. Member Entry Resources are
                    represented as Atom Entries. Media Resources MAY have
                    representations in any media type. A Media Link Entry is a
                    Member Entry that contains metadata about a Media Resource.
                    This diagram shows the classification of the resources:
                </t>

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
  Member Resource
      -&gt; Member Entry Resource
           -&gt; Media Link Entry Resource
      -&gt; Media Resource
</artwork>
</figure>

                <t>Collections, represented by Atom feeds, contain
                entries. Those entries contain the Member Entry and Media Resources IRIs of the Collection.
                A Collection can contain any
                number of entries of either kind. In the diagram of a Collection
                below there are two entries. The first contains the IRI of a
                Member Entry Resource. The second contains the IRIs of both a
                Media Resource and a Media Link Entry Resource, which contains
                the metadata for that Media Resource:
                </t>
<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
  Collection
     Entry
        Member Entry IRI    -&gt;   Member Entry Resource

     Entry
        Member Entry IRI    -&gt;   Media Link Entry Resource
        Media IRI           -&gt;   Media Resource

</artwork>
</figure>

<t> Service Documents represent server-defined groups of Collections, and are
used to initialize the process of creating and editing resources.  </t>



</section>

<section toc="default" anchor="operation" title="Protocol Operations">

<section toc="default" anchor="find-collections" title="Retrieving a Service Document">
<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                                     Server
  |                                           |
  |  1.) GET to URI of Service Document       |
  |------------------------------------------&gt;|
  |                                           |
  |  2.) Service Document                     |
  |&lt;------------------------------------------|
  |                                           |
</artwork>
</figure>

<t>

<list style="numbers">
  <t>The client sends a GET request to the URI of the Service Document.</t>
  <t>The server responds with the document enumerating the IRIs of a set of
  Collections and the capabilities of those Collections supported by the
  server. The content of this document can vary based on aspects of the client
  request, including, but not limited to, authentication credentials.</t>
</list>
</t>
</section>

<section toc="default" anchor="listing" title="Listing Collection Members">

<t>
    To list the members of a Collection the client sends a GET request to the
    URI of a Collection.  An Atom Feed Document is returned containing one Atom
    Entry for each Member Entry Resource. See <xref target="templates" pageno="false" format="default"></xref> and <xref target="atom-entry-extensions" pageno="false" format="default"></xref> for a description of the feed contents.
</t>
        <figure title="">
          <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                          Server
  |                                |
  |  1.) GET to Collection URI     |
  |-------------------------------&gt;|
  |                                |
  |  2.) 200 OK, Atom Feed Doc     |
  |&lt;-------------------------------|
  |                                |
          </artwork>
        </figure>

        <t>
          <list style="numbers">
        <t>
          The client sends a GET request to the URI of the Collection.
        </t>
        <t>
          The server responds with an Atom Feed Document containing the IRIs
          of the Collection members.
        </t>
          </list>
        </t>

      </section>




<section toc="default" anchor="post-to-create" title="Creating a Resource">

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                                     Server
  |                                           |
  |  1.) POST to URI of Collection            |
  |------------------------------------------&gt;|
  |                                           |
  |  2.) 201 Created                          |
  |      Location: Member Entry URI           |
  |&lt;------------------------------------------|
  |                                           |
</artwork>
</figure>

<t>
<list style="numbers">
  <t>The client POSTs a representation of the Member to the URI of the
  Collection.</t>
  <t>If the Member Resource was created successfully, the server responds with a
      status code of 201 and a Location: header that contains the IRI of the
      newly created Member Entry Resource. Media Resources may have also
      been created and their IRIs can be found through the Member Entry Resource.
      See <xref target="media-link-entries" pageno="false" format="default"></xref> for more details.</t>
</list>
</t>

</section>


<section toc="default" anchor="edit" title="Editing a Resource">

<t>Once a resource has been created and its Member URI is known, that URI can be used
to retrieve, update, and delete the resource.</t>

    <section toc="default" title="Retrieving a Resource">

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                                     Server
  |                                           |
  |  1.) GET to Member URI                    |
  |------------------------------------------&gt;|
  |                                           |
  |  2.) Member Representation                |
  |&lt;------------------------------------------|
  |                                           |
</artwork>
</figure>

<t>
<list style="numbers">
  <t>The client sends a GET request to the URI of a Member Resource to retrieve its
  representation.</t>
  <t>The server responds with the representation of the resource.</t>
</list>
</t>
</section>

<section toc="default" title="Updating a Resource">

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                                     Server
  |                                           |
  |  1.) PUT to Member URI                    |
  |------------------------------------------&gt;|
  |                                           |
  |  2.) 200 OK                               |
  |&lt;------------------------------------------|
</artwork>
</figure>

<t>
<list style="numbers">
   <t>The client PUTs an updated representation to the URI of a Member Resource.</t>
   <t>Upon a successful update of the resource the server responds with a status
   code of 200.</t>
</list>
</t>
</section>

<section toc="default" title="Deleting a Resource">
<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
Client                                     Server
  |                                           |
  |  1.) DELETE to Member URI                 |
  |------------------------------------------&gt;|
  |                                           |
  |  2.) 200 Ok                               |
  |&lt;------------------------------------------|
  |                                           |
</artwork>
</figure>

<t>
<list style="numbers">
  <t>The client sends a DELETE request to the URI of a Member Resource.</t>
   <t>Upon the successful deletion of the resource the server responds with a
       status code of 200.    </t>
</list>
   A different approach is taken
   for deleting Media Resources, see <xref target="media-link-entries" pageno="false" format="default"></xref> for details.
</t>
</section>
</section>




    <section toc="default" title="Use of HTTP Response codes">
        <t>
        The Atom Protocol uses the response status codes defined in HTTP to
        indicate the success or failure of an operation. Consult the HTTP
        specification <xref target="RFC2616" pageno="false" format="default"></xref> for detailed definitions of each
        status code. It is RECOMMENDED that entities contained within
        HTTP 4xx and 5xx responses include a human-readable explanation of the error.
        </t>
      </section>

 </section>


 <section toc="default" anchor="xmlns" title="Atom Publishing Protocol Documents">

<section toc="default" anchor="appcatsext" title="Document Types">
   <t>This specification describes two kinds of Documents - Category
   Documents and Service Documents.</t>

   <t>A Category Document (<xref target="catdocs" pageno="false" format="default"></xref>) contain lists of
   categories specified using the "atom:category" element from the Atom
   Syndication Format. A Service Document (<xref target="appdocs" pageno="false" format="default"></xref>) describes
   capabilities of workspaces, which are server-defined groupings of
   Collections. </t>

   <t>The namespace name <xref target="W3C.REC-xml-names-19990114" pageno="false" format="default"></xref> for either
   kind of document is: </t>
   <figure title="">
     <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">    http://purl.org/atom/app#</artwork>
   </figure>

   <t> This specification uses the prefix "app:" for the namespace name.  The
   prefix "atom:" is used for "http://www.w3.org/2005/Atom", the namespace name of
   the Atom Syndication Format <xref target="RFC4287" pageno="false" format="default"></xref>. The namespace prefixes
   are not semantically significant.</t>

  <t> Atom Publishing Protocol Documents MUST be well-formed XML. This
  specification does not define any DTDs for Atom Protocol formats, and hence
  does not require them to be "valid" in the sense used by XML.</t>
</section>

<section toc="default" anchor="appcatsex" title="Document Extensibility">

  <t>The namespace name "http://purl.org/atom/app#" is reserved for future
  forward-compatible revisions of the document types. Future versions of this
  specification could add new elements and attributes.  Software written to
  conform to this version of the specification will not be able to process such
  markup correctly and in fact will not be able to distinguish it from markup
  error.  </t>

  <t>Unrecognized markup in an Atom Publishing Protocol document is considered
  "foreign markup" as defined in <xref target="RFC4287" pageno="false" format="default"></xref>. </t>

  <t>Markup from other vocabularies ("foreign markup") can be used anywhere
  within a Category or Service Document unless it is explicitly forbidden. Processors that encounter foreign markup MUST
  NOT stop processing or signal an error, and SHOULD preserve foreign markup
  when transmitting such documents.</t>

</section>


            </section>

<section toc="default" anchor="catdocs" title="Category Documents">


         <t>
Category Documents contain lists of categories described using the
"atom:category" element from the Atom Syndication Format <xref target="RFC4287" pageno="false" format="default"></xref>.
Categories can also appear in Service Documents and describe the categories allowed in a Collection (see <xref target="categories-elem" pageno="false" format="default"></xref>).
         </t>

     <t>Category Documents are identified with the "application/atomcat+xml" media type (see
         <xref target="iana" pageno="false" format="default"></xref>).
     </t>


<section toc="default" anchor="catdocseg" title="Example">

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    &lt;?xml version="1.0" ?&gt;
    &lt;app:categories
        xmlns:app="http://purl.org/atom/app#"
        xmlns="http://www.w3.org/2005/Atom"
        fixed="yes" scheme="http://example.com/cats/big3"&gt;
      &lt;category term="animal" /&gt;
      &lt;category term="vegetable" /&gt;
      &lt;category term="mineral" /&gt;
    &lt;/app:categories&gt;
</artwork>

</figure>

<t>
This Category Document contains three categories with the terms "animal",
"vegetable", and "mineral". None of the categories has a label attribute (as
defined in <xref target="RFC4287" pageno="false" format="default"></xref>).  They all inherit the
"http://example.com/cats/big3" category 'scheme' (in the <xref target="RFC4287" pageno="false" format="default"></xref> sense) declared on the app:categories element. Therefore if the
"mineral" category were to appear in an Atom Entry or Feed Document, it would
appear as:
</t>

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    &lt;category scheme="http://example.com/cats/big3" term="mineral" /&gt;
</artwork>
</figure>

</section>

<section toc="default" anchor="catdocselemdef" title="Element Definitions">

<section toc="default" anchor="appcats" title='The "app:categories" element'>
<t>
The root of a Category Document is the "app:categories" element. An
app:categories element MAY contain one or more "atom:category" elements from the
Atom namespace ("http://www.w3.org/2005/Atom").
</t>

<t>If an app:category child element has no "scheme" attribute it inherits the attribute from its app:categories parent.
An app:category child element with an existing "scheme" attribute
does not inherit the "scheme" value of its "app:categories" parent element. </t>

<section toc="default" anchor="appcatsattr" title='Attributes of "app:categories"'>

<t>The app:categories element MAY contain a "fixed" attribute, with a value of
either "yes" or "no", indicating if the list of categories is a fixed or an
open set. Collections that indicate the set is fixed MAY reject
members whose categories are not listed in the Collection Document. Collections that
indicate the set is open SHOULD NOT reject otherwise acceptable
members whose categories are not listed in the Collection.</t>

<t>Alternatively, the app:categories element MAY contain an "href" attribute,
whose value MUST be an IRI reference identifying a Category Document. If the
"href" attribute is provided, the app:categories element MUST be empty and MUST
NOT have the "fixed" or "scheme" attributes.</t>


        <t>
            <figure title="">
                <artwork name="app:categories" align="left" height="" width="" alt="" type="" xml:space="preserve">
atomCategory =
    element atom:category {
       atomCommonAttributes,
       attribute term { text },
       attribute scheme { atomURI }?,
       attribute label { text }?,
       undefinedContent
    }

appInlineCategories =
    element app:categories {
        attribute fixed { "yes" | "no" }?,
        attribute scheme { atomURI }?,
        (atomCategory*)
    }

appOutOfLineCategories =
    element app:categories {
        attribute href { atomURI },
        (empty)
    }

appCategories = appInlineCategories | appOutOfLineCategories</artwork>
            </figure>
            </t>

</section>

</section>

</section>

</section>






 <section toc="default" anchor="appdocs" title="Service Documents">


         <t> For authoring to commence, a client needs to first discover the
             capabilities and locations of the available collections.
             Service Documents are designed to support this discovery process.

         </t>

     <t>A Service Document describes workspaces, which are server-defined groupings of Collections.
     Service Documents are identified with the "application/atomserv+xml" media type (see
         <xref target="iana" pageno="false" format="default"></xref>).
     </t>

     <t> There is no requirement that a server support multiple workspaces.  In
     addition, a Collection MAY appear in more than one Workspace.
     </t>


     <section toc="default" anchor="appdocs_example" title="Example">

         <figure title="">
             <artwork name="introspectionDoc" align="left" height="" width="" alt="" type="" xml:space="preserve">
&lt;?xml version="1.0" encoding='utf-8'?&gt;
&lt;service xmlns="http://purl.org/atom/app#"
         xmlns:atom="http://www.w3.org/2005/Atom"&gt;
  &lt;workspace&gt;
    &lt;atom:title&gt;Main Site&lt;/atom:title&gt;
    &lt;collection
        href="http://example.org/reilly/main" &gt;
      &lt;atom:title&gt;My Blog Entries&lt;/atom:title&gt;
      &lt;categories
         href="http://example.com/cats/forMain.cats" /&gt;
    &lt;/collection&gt;
    &lt;collection
        href="http://example.org/reilly/pic" &gt;
      &lt;atom:title&gt;Pictures&lt;/atom:title&gt;
      &lt;accept&gt;image/*&lt;/accept&gt;
    &lt;/collection&gt;
  &lt;/workspace&gt;
  &lt;workspace&gt;
    &lt;atom:title&gt;Side Bar Blog&lt;/atom:title&gt;
    &lt;collection
        href="http://example.org/reilly/list" &gt;
      &lt;atom:title&gt;Remaindered Links&lt;/atom:title&gt;
      &lt;accept&gt;entry&lt;/accept&gt;
      &lt;categories fixed="yes"&gt;
        &lt;atom:category
          scheme="http://example.org/extra-cats/"
          term="joke" /&gt;
        &lt;atom:category
          scheme="http://example.org/extra-cats/"
          term="serious" /&gt;
      &lt;/categories&gt;
    &lt;/collection&gt;
  &lt;/workspace&gt;
&lt;/service&gt;
</artwork>
         </figure>


         <t>
             This Service Document describes two workspaces. The first Workspace
             is called "Main Site", has two collections called "My Blog Entries"
             and "Pictures" whose IRIs are "http://example.org/reilly/main" and
             "http://example.org/reilly/pic" respectively.  The "Pictures"
             Workspace includes an "accept" element indicating that a client can
             post image files to the Collection to create new entries.  Entries
             with associated media resources are discussed in <xref target="media-link-entries" pageno="false" format="default"></xref>.
         </t>
         <t>
             The second Workspace is called "Side Bar Blog" and has a single Collection
             called "Remaindered Links" whose IRI is "http://example.org/reilly/list".
        </t>

<t>
Within each of the two entry collections, the categories element provides a
list of available categories for member entries. In the "My Blog Entries"
Collection, the list of available categories is 
obtainable through the "href"
attribute. The "Side Bar Blog" Collection provides a 
category list within the Service Document, but states the list is 
fixed, signaling a request from the server that entries be posted 
using only those two categories.
</t>

     </section>


     <section toc="default" anchor="service_document_elements" title="Element Definitions">

         <section toc="default" title='The "app:service" Element'>

        <t>The root of a Service Document is the "app:service" element. </t>

            <t>The "app:service" element is the container for service
            information associated with one or more workspaces. An app:service
            element MUST contain one or more app:workspace elements.</t>

            <t>
            <figure title="">
             <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
namespace app = "http://purl.org/atom/app#"
start = appService
             </artwork>
            </figure>

        </t>

            <t>
            <figure title="">
                <artwork name="app:service" align="left" height="" width="" alt="" type="" xml:space="preserve">
appService =
   element app:service {
      appCommonAttributes,
      ( appWorkspace+
        &amp; extensionElement* )
   }</artwork>
            </figure>
            </t>


        </section>

        <section toc="default" title='The "app:workspace" Element'>
          

            <t>
                The "app:workspace" element contains information elements about
                the collections of resources available for editing. The
                app:workspace element contains zero or more app:collection
                elements.
            </t>

            <t>
                <figure title="">
                    <artwork name="app:workspace" align="left" height="" width="" alt="" type="" xml:space="preserve">
appWorkspace =
   element app:workspace {
      appCommonAttributes,
      ( appCollection*
        &amp; extensionElement* )
   }

atomTitle = element atom:title { atomTextConstruct }</artwork>
                </figure>
            </t>


            <t>
                In an app:workspace element, the first app:collection element MUST refer to the
                preferred or primary Collection. In the following example, the "Entries" collection
                would be considered the preferred Collection:
            </t>

            <t>
            <figure title="">
              <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">    &lt;service xmlns="http://purl.org/atom/app#"
     xmlns:atom="http://www.w3.org/2005/Atom"&gt;
      &lt;workspace&gt;
        &lt;atom:title&gt;My Blog&lt;/atom:title&gt;
        &lt;collection
             href="http://example.org/myblog/entries" &gt;
          &lt;atom:title&gt;Entries&lt;/atom:title&gt;
       &lt;/collection&gt;
        &lt;collection
             href="http://example.org/myblog/fotes"&gt;
           &lt;atom:title&gt;Photos&lt;/atom:title&gt;
           &lt;accept&gt;image/*&lt;/accept&gt;
        &lt;/collection&gt;
      &lt;/workspace&gt;
    &lt;/service&gt; </artwork>
            </figure>
            </t>

            <section toc="default" title='The "atom:title" Element'>
              <t>
The app:workspace element MUST contain one "atom:title" element, giving
a human-readable title for the workspace.
              </t>
            </section>

        </section>



        <section toc="default" title='The "app:collection" Element'>
            <t>
              The "app:collection" element describes a Collection. The app:collection
              element MAY contain one app:accept element and MAY contain any
              number of app:categories elements. The app:collection element
              MUST NOT contain more that one app:accept element.
            </t>
            <t>
                <figure title="">
                    <artwork name="app:collection" align="left" height="" width="" alt="" type="" xml:space="preserve">
appCollection =
   element app:collection {
      appCommonAttributes,
      attribute href { atomURI  },
      ( appAccept?

        &amp; appCategories*
        &amp; extensionElement* )
   }</artwork>
                </figure>
            </t>
<section toc="default" title="Usage in Atom Feed Documents">
            <t>
                The app:collection element MAY appear as a child of an atom:feed
                or atom:source element in an Atom Feed Document. Its value
                identifies a Collection by which new entries can be added to
                appear in the feed.
            </t>
</section>
            <section toc="default" title='The "href" Attribute'>
                <t>The app:collection element MUST contain an "href"
                    attribute, whose value gives the IRI of the
                    Collection.
                </t>
            </section>
            <section toc="default" title='The "atom:title" Element'>
              <t>
                The app:collection Element MUST contain one "atom:title"
                element, giving a human-readable title for the Workspace.
              </t>
            </section>


        </section>

        <section toc="default" anchor="accept" title='The "app:accept" Element'>

            <t>

                The "app:accept" element value specifies a comma-separated list of media-ranges (see <xref target="RFC2616" pageno="false" format="default"></xref>) identifying
                the types of representations that can be POSTed to the URI of a Collection. Whitespace
                separation of the media-range values is considered insignificant and MUST be ignored.
            </t>
            <t>

                The app:accept element is similar to the HTTP Accept request-header <xref target="RFC2616" pageno="false" format="default"></xref> with
                the exception that app:accept has no notion of preference.  As a result, the value
                syntax of app:accept does not use "accept-params" or "q" arguments as specified in
                <xref target="RFC2616" pageno="false" format="default"></xref>, section 14.1. </t>

                <t>  The order of media-ranges is not significant. The following lists are
                all equivalent:
            </t>

            <t>
            <figure title="">
              <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
  &lt;app:accept&gt;image/png, image/*&lt;/app:accept&gt;
  &lt;app:accept&gt;image/*, image/png&lt;/app:accept&gt;
  &lt;app:accept&gt;image/*&lt;/app:accept&gt; </artwork>
            </figure>
            </t>

            <t>
                A value of "entry" may appear in any list of media-ranges in an accept
               element and indicates that Atom Entry Documents can be posted to the Collection.
                If the accept element is omitted or empty, clients SHOULD assume that only Atom Entry documents
                will be accepted by the Collection.
            </t>


            <t>
                <figure title="">
                    <artwork name="app:accept" align="left" height="" width="" alt="" type="" xml:space="preserve">
appAccept =
   element app:accept {
         appCommonAttributes,
         ( appTypeValue? )
   }


appTypeValue = ( "entry" | media-type |entry-or-media-type  )
media-type = xsd:string { pattern = "entry,(.+/.+,?)*" }
entry-or-media-type = xsd:string { pattern = "(.+/.+,?)*" }</artwork>
                </figure>
            </t>
        </section>

<section toc="default" anchor="categories-elem" title='The "app:categories" Element'>

<t>The "app:categories" element provides a listing of the categories that can be
applied to the members of a Collection.</t>

 <t>
   <figure title="">
     <artwork name="app:categories" align="left" height="" width="" alt="" type="" xml:space="preserve">
atomCategory =
    element atom:category {
       atomCommonAttributes,
       attribute term { text },
       attribute scheme { atomURI }?,
       attribute label { text }?,
       undefinedContent
    }

appInlineCategories =
    element app:categories {
        attribute fixed { "yes" | "no" }?,
        attribute scheme { atomURI }?,
        (atomCategory*)
    }

appOutOfLineCategories =
    element app:categories {
        attribute href { atomURI },
        (empty)
    }

appCategories = appInlineCategories | appOutOfLineCategories</artwork>
   </figure>
</t>

<t>
The app:categories element MAY contain a "fixed" attribute, with a value of
either "yes" or "no", indicating whether or not the listing of categories is
considered to be a fixed, or closed set. The absence of the "fixed" attribute
is equivalent to the presence of a "fixed" attribute with a value of "no".
Collections that indicate a fixed set
MAY reject members that include categories not specified in the provided
listing. Collections that indicate an open set SHOULD NOT reject otherwise
acceptable members whose categories are not present in the
provided list.
</t>

<t>
The app:categories element MAY contain an "href" attribute, whose value MUST be
an IRI reference identifying a Category Document. If the "href" attribute is
provided, the app:categories element MUST be empty and the
"fixed" and "scheme" attributes MUST NOT be present.
</t>


</section>


    </section>



</section>





   <section toc="default" anchor="collection_resource" title="Creating and Editing Resources">

<section toc="default" anchor="memuri" title="Member URIs">

<t>
    The Member URI supports retrieving, updating and deleting the resource
    using HTTP GET, PUT and DELETE as described in this section. Retrieval and updating
    of Member Entry Resources are done via Atom Entry representations.
</t>

<t>
    Member Entry URIs appear in two places. First, they are returned in a Location header
    after successful resource creation using POST, as described below. Second, in
    the entries of a Collection document, by an atom:link element with a link relation of
    "edit".
</t>

<t>
Each Member Entry SHOULD contain such an atom:link element
providing its Member Entry URI.
</t>

</section>

       <section toc="default" title="Creating resources with POST">
           <t>
               To add members to a Collection, clients send POST requests to the
               URI of a Collection.  Collections MAY impose constraints on the media-types of
               request entities POSTed to the Collection and MAY generate a response with a
               status code of 415 ("Unsupported Media Type").
           </t>
           <t>
               If a Member Resource was created in the Collection which received the
               POST, its Member Entry URI MUST be returned in an HTTP Location header.
           </t>
           <t>

               When the server generates a response with a status code of 201
               ("Created"), it SHOULD also return a response body, which if
               provided, MUST be an Atom Entry Document representing the
               newly-created resource, and SHOULD include its Member Entry URI in an
               atom:link element that has a relation of "edit".
           </t>
           <t>

               Since the server is free to alter the posted entry, for example by
               changing the content of the "id" element, returning the Entry as
               described in the previous paragraph can be useful to the client,
               enabling it to correlate the client and server views of the new
               Entry.
           </t>
           <t>

               When the POST request contains an Atom Entry Document, the
               response from the server SHOULD contain a Content-Location header
               that contains the same character-by-character value as the
               Location header.
           </t>
           <t>

               The request body sent with the POST need not be an Atom Entry. For example, it
               might be a picture, or a movie.  For a discussion of the issues in posting
               such content, see <xref target="media-link-entries" pageno="false" format="default"></xref>.

           </t>







       <section toc="default" anchor="create-example" title="Example">
           <t>Below, the client sends a POST request containing an Atom Entry representation to the URI of the Collection:
               <figure title="">
   <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    POST /myblog/entries HTTP/1.1
    Host: example.org
    User-Agent: Thingio/1.0
    Authorization: Basic ZGFmZnk6c2VjZXJldA==
    Content-Type: application/atom+xml
    Content-Length: nnn
    Slug: First Post

    &lt;?xml version="1.0" ?&gt;
    &lt;entry xmlns="http://www.w3.org/2005/Atom"
        xmlns:app="http://purl.org/atom/app#"&gt;
      &lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;
      &lt;id&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;/id&gt;
      &lt;updated&gt;2003-12-13T18:30:02Z&lt;/updated&gt;
      &lt;author&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/author&gt;
      &lt;content&gt;Some text.&lt;/content&gt;
    &lt;/entry&gt;</artwork>
             </figure>
         </t>

         <t>
             The server signals a successful creation with a status code of
             201. The response includes a "Location" header indicating the
             Member Entry URI of the Atom Entry and a representation of that Entry in
             the body of the response.

               <figure title="">
   <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    HTTP/1.1 201 Created
    Date: Fri, 7 Oct 2005 17:17:11 GMT
    Content-Length: nnn
    Content-Type: application/atom+xml; charset="utf-8"
    Content-Location: http://example.org/edit/first-post.atom
    Location: http://example.org/edit/first-post.atom

    &lt;?xml version="1.0"?&gt;
    &lt;entry xmlns="http://www.w3.org/2005/Atom"
        xmlns:app="http://purl.org/atom/app#"&gt;
      &lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;
      &lt;id&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;/id&gt;
      &lt;updated&gt;2003-12-13T18:30:02Z&lt;/updated&gt;
      &lt;author&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/author&gt;
      &lt;content&gt;Some text.&lt;/content&gt;
      &lt;link rel="edit"
          href="http://example.org/edit/first-post.atom"/&gt;
    &lt;/entry&gt;</artwork>
             </figure>
         </t>

         <t>
             The Entry created and returned by the server might not match the
             Entry POSTed by the client.  A server MAY change the values of
             various elements in the Entry such as the atom:id, atom:updated and
             atom:author values and MAY choose to remove or add other elements
             and attributes, or change element and attribute values.
         </t>
         <t>
             In particular, the publishing system in this example filled in some
             values not provided in the original POST.  For example, it
             ascertained the name of the author, presumably via the
             authentication protocol used to establish the right to post.
         </t>

     </section> 




 </section> 


       <section toc="default" anchor="update-via-PUT" title="Updating Resources with PUT">
            <t>
                To update a resource, clients send PUT requests to its Member URI, as
                specified in <xref target="RFC2616" pageno="false" format="default"></xref>.
            </t>
           <t>
               To avoid unintentional loss of data when editing Member Entries or
               Media Link Entries, Atom Protocol clients SHOULD preserve all metadata
               that has not been intentionally modified, including unknown
               foreign markup as defined in Section 6 of <xref target="RFC4287" pageno="false" format="default"></xref>.
           </t>
       </section>


       <section toc="default" anchor="update-via-DELETE" title="Deleting Resources with DELETE">

           <t>
               To delete a resource, clients send DELETE requests to its Member URI, as
               specified in <xref target="RFC2616" pageno="false" format="default"></xref>. For Media
               Resources, deletion of a Media Link Entry SHOULD result in the deletion of the
               associated Media Resource.

           </t>

       </section>




       <section toc="default" anchor="media-link-entries" title="Media Resources and Media Link Entries">

         

         <t> A client can POST a media type other than application/atom+xml to a
         Collection.  Such a request creates two new resources - one
         that corresponds to the entity sent in the request, called the Media
         Resource, and an associated Member Entry, called the
         Media Link Entry. The server can signal the media types it will accept
         via the "accept" element in the Service Document (<xref target="accept" pageno="false" format="default"></xref>). </t>

     <t>The Media Link Entry contains the IRI of the Media Resource
         and makes metadata about it separately available for
         retrieval and update. The Media Link Entry is used to store
         metadata about the (perhaps non-textual) Media Resource.  </t>

         <t> Successful responses to creation requests MUST include the URI of
         the Media Link Entry in the Location header.  The Media Link
         Entry SHOULD contain an atom:link element with a link relation of
         "edit-media" that contains the Media Resource IRI.
         The Media Link Entry MUST have an "atom:content" element with a
         non-empty "src" attribute. The value of the "src" attribute
         is an IRI of the newly created Media Resource.
         It is OPTIONAL that the IRI of the "src" attribute on the
         atom:content element be the same as the Media Resource IRI. That is,
         the "src" attribute value might instead be a link into a static cache
         or content distribution network and not be the Media Resource IRI.
         </t>

         <t>Implementers are asked to note that according to the requirements of
         <xref target="RFC4287" pageno="false" format="default"></xref>, entries, and thus Media Link Entries, MUST
         contain an atom:summary element.  Upon successful creation of a Media
         Link Entry, a server MAY choose to populate the atom:summary element
         (as well as other required elements such as atom:id, atom:author and
         atom:title) with content derived from the POSTed entity or from any
         other source.  A server might not allow a client to modify the server
         selected values for these elements.</t>


         <t>For resource creation this specification only defines cases where
         the POST body has an Atom Entry entity declared as an Atom media type
         ("application/atom+xml"), or a non-Atom entity declared as a non-Atom
         media type.  It does not specify any request semantics or server
         behavior in the case where the POSTed media-type is
         "application/atom+xml" but the body is something other than an Atom
         Entry. In particular, what happens on POSTing an Atom Feed Document
         to a Collection using the "application/atom+xml" media type is
         undefined.
           </t>



       </section> 

<section toc="default" title="The Slug: Header">


<t>Slug is a HTTP entity-header whose value is a "slug", i.e. a short name
that can be used as part of URI for a Member Resource.</t>

<t>
When posting an entity to a Collection to add a new Member, the server MAY use
this information when creating the Member URI of the newly-created resource, for
instance by using some or all of the words in the last URI segment. It MAY also
use it when creating the atom:id or as the title of a Media Link Entry (see
<xref target="media-link-entries" pageno="false" format="default"></xref>.).
</t>



<t>
Servers MAY ignore the Slug entity-header and MAY alter its value before using
it. For example, the server MAY filter out some characters or replace accented
letters with non-accented ones, spaces with underscores, etc.
</t>

<section toc="default" title="Slug: Header syntax">

<t>The syntax of this header MUST conform to the augmented BNF grammar in section 2.1 of
the HTTP/1.1 specification [RFC2616]. The TEXT rule is described in section 2.2 of the same document. </t>

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    Slug = "Slug" ":" *TEXT
</artwork>
</figure>


<t>Clients MAY send non-ASCII characters in the Slug entity-header, which they MUST
encode using "encoded-words", as defined in [RFC2047]. Servers SHOULD treat the slug
as [RFC2047] encoded if it matches the "encoded-words" production. </t>


</section>



           <section toc="default" anchor="title-header-example" title="Examples">
               <t>
                   Below, the client sends a POST request containing a PNG image to the
                   URI of the Collection:
               </t>

               <t>
            <figure title="">
              <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    POST /myblog/entries HTTP/1.1
    Host: example.org
    Content-Type: image/png
    Slug: The Beach
    Authorization: Basic ZGFmZnk6c2VjZXJldA==
    Content-Length: nnn

    ...binary data... </artwork>
            </figure>
        </t>


               <t>
                   The server signals a successful creation with a status code
                   of 201. The response includes a Location header indicating
                   the Member URI of the Media Link Entry and a representation
                   of that entry in the body of the response.  The Media Link
                   Entry includes a content element with a src attribute,
                   and a link using the link
                   relation "edit-media" specifying the IRI to be used for
                   modifying the Media Resource.
               </t>

               <t>
            <figure title="">
              <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    HTTP/1.1 201 Created
    Date: Fri, 7 Oct 2005 17:17:11 GMT
    Content-Length: nnn
    Content-Type: application/atom+xml; charset="utf-8"
    Content-Location: http://example.org/myblog/edit/the_beach
    Location: http://example.org/myblog/edit/the_beach

    &lt;?xml version="1.0"?&gt;
    &lt;entry xmlns="http://www.w3.org/2005/Atom"&gt;
      &lt;title&gt;The Beach&lt;/title&gt;
      &lt;id&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;/id&gt;
      &lt;updated&gt;2005-10-07T17:17:08Z&lt;/updated&gt;
      &lt;author&gt;&lt;name&gt;Daffy&lt;/name&gt;&lt;/author&gt;
      &lt;summary type="text" /&gt;
      &lt;content type="image/png"
         src="http://example.org/media/the_beach.png"/&gt;
      &lt;link rel="edit-media"
         href="http://example.org/media/edit/the_beach.png" /&gt;
      &lt;link rel="edit"
         href="http://example.org/myblog/edit/the_beach /&gt;
    &lt;/entry&gt; </artwork>
            </figure>
        </t>

        <t>
            Here is an example of the Slug: header that uses the encoding
            rules of <xref target="RFC2047" pageno="false" format="default"></xref>.
        </t>

               <t>
            <figure title="">
              <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
    POST /myblog/entries HTTP/1.1
    Host: example.org
    Content-Type: image/png
    Slug: =?iso-8859-1?q?The_Beach?=
    Authorization: Basic ZGFmZnk6c2VjZXJldA==
    Content-Length: nnn

    ...binary data... </artwork>
            </figure>
        </t>

        <t>
            See <xref target="create-example" pageno="false" format="default"></xref> for an example
            of the Slug: header applied to the creation of
            a Member Entry Resource.
        </t>




           </section> 

       </section> 


 </section> 

       <section toc="default" anchor="templates" title="Listing Collections">

<t>Collection resources MUST provide representations in the form of Atom Feed documents
whose entries represent the Members in the Collection.
Each entry in the Feed Document SHOULD have an atom:link element with a relation of "edit" (See <xref target="new-link-relation" pageno="false" format="default"></xref>). </t>

<t>The entries in the returned Atom Feed MUST be ordered by their "atom:updated" property, with
the most recently updated entries coming first in the document order. Clients SHOULD be constructed in consideration of the fact that
changes which do not alter the atom:updated value of an entry will not affect the position of the entry in a Collection.
</t>

<t>Clients MUST NOT assume that an Atom Entry returned in the Feed is a full representation of a Member
Entry Resource and SHOULD perform a GET on the URI of the Member Entry before editing.</t>



<section toc="default" title="Collection Paging">

<t>Collections can contain large numbers of resources. A naive client such as a
web spider or web browser could be overwhelmed if the response to a GET
contained every entry in the Collection, and the server would waste large
amounts of bandwidth and processing time on clients unable to handle the
response. For this reason, servers MAY return a partial listing of the most
recently updated Member Resources. Such partial feed documents MUST have an
atom:link with a "next" relation whose "href" value is the URI of the next
partial listing of the Collection (the next most recently updated Member Resources)
where it exists. This is called "Collection paging".
</t>




<t> The returned
Atom Feed MAY NOT contain entries for all the Members in a Collection. Instead, the
Atom Feed document MAY contain link elements with "rel" attribute values of
"next", "previous", "first" and "last" that can be used to navigate through the
complete set of matching entries.
</t>

<t>
For instance, suppose a client is supplied the URI "http://example.org/entries/go"
of a Collection of Member entries, where the server as a matter of
policy avoids generating feed documents containing more than 10 entries.
The Atom Feed document for the Collection will then represent the first 'page' in
a set of 10 linked feed documents. The "first" relation will reference the initial feed document in the set and the "last"
relation references the final Atom Feed Document in the set. Within each document, the "next" and
"previous" link relations reference the preceding and subsequent documents.

<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
  &lt;feed xmlns="http://www.w3.org/2005/Atom"&gt;
    &lt;link rel="first"
          href="http://example.org/entries/go" /&gt;
    &lt;link rel="next"
          href="http://example.org/entries/2" /&gt;
    &lt;link rel="last"
          href="http://example.org/entries/10" /&gt;
    ...
  &lt;/feed&gt;
</artwork>
</figure>
</t>

<t>
The "next" and "previous" link elements for the feed 'page' located at
"http://example.org/entries/2" would look like this:
<figure title="">
<artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
  &lt;feed xmlns="http://www.w3.org/2005/Atom"&gt;
    &lt;link rel="first"
          href="http://example.org/entries/go" /&gt;
    &lt;link rel="previous"
          href="http://example.org/entries/go" /&gt;
    &lt;link rel="next"
          href="http://example.org/entries/3" /&gt;
    &lt;link rel="last"
          href="http://example.org/entries/10" /&gt;
    ...
  &lt;/feed&gt;
</artwork>
</figure>


</t>


</section>



           </section>




   <section toc="default" anchor="atom-entry-extensions" title="Atom Format Link Relation Extensions">

       <section toc="default" anchor="new-link-relation" title='The "edit" Link Relation'>
           <t>
               This specification adds the value "edit" to the Atom Registry of Link Relations
               (see section 7.1 of <xref target="RFC4287" pageno="false" format="default"></xref>).
               The value of "edit" specifies that the value of the href
               attribute is the IRI of an editable Member Entry. When appearing within an
               atom:entry, the href IRI MAY be used to retrieve, update and delete the resource represented by
               that entry. An atom:entry MUST contain no more than one "edit" link relation.
           </t>
       </section>


       <section toc="default" anchor="new-media-link-relation" title='The "edit-media" Link Relation'>
           <t>
               This specification adds the value "edit-media" to the Atom Registry of Link Relations
               (see section 7.1 of <xref target="RFC4287" pageno="false" format="default"></xref>). When appearing within an atom:entry, the value of the href
               attribute is an IRI that MAY be used to modify a Media Resource associated with that entry.
           </t>
           <t>
               An atom:entry element MAY contain zero or more "edit-media" link
               relations. An atom:entry MUST NOT contain more than one atom:link
               element with a rel attribute value of "edit-media" that has the
               same type and hreflang attribute values. All "edit-media" link
               relations in the same entry reference the same resource.  If a
               client encounters multiple "edit-media" link relations in an
               entry then it SHOULD choose a link based on the client
               preferences for type and hreflang. If a client encounters
               multiple "edit-media" link relations in an entry and has no
               preference based on the type and hreflang attributes then the
               client SHOULD pick the first "edit-media" link relation in
               document order.
           </t>
       </section>

   </section>

       <section toc="default" anchor="pub-control" title="Atom Publishing Controls">



           <t>
               This specification defines an Atom Format Structured Extension,
               as defined in Section 6 of <xref target="RFC4287" pageno="false" format="default"></xref>, for publishing
               control within the http://purl.org/atom/app# namespace.
           </t>


           <section toc="default" title='The "app:control" Element'>

             <figure title="">
               <artwork name="" align="left" height="" width="" alt="" type="" xml:space="preserve">
namespace app = "http://purl.org/atom/app#"

 pubControl =
    element app:control {
    atomCommonAttributes,
    pubDraft?
    &amp; extensionElement
 }

 pubDraft =
   element app:draft { "yes" | "no" }</artwork>
        </figure>


        <t>
          The "app:control" element MAY appear as a child of an atom:entry which
          is being created or updated via the Atom Publishing Protocol. The
          app:control element MUST appear only once in an Entry.  The
          app:control element is considered foreign markup as defined in Section
          6 of <xref target="RFC4287" pageno="false" format="default"></xref>.
        </t>
        <t>
          The app:control element and its child elements MAY be included in Atom
          Feed or Entry Documents.
        </t>
        <t>
          The app:control element MAY contain exactly one "app:draft" element as
          defined below, and MAY contain zero or more extension elements as
          defined in Section 6 of <xref target="RFC4287" pageno="false" format="default"></xref>.
      </t>

          <section toc="default" title='The "app:draft" Element'>
            <t>
              The number of app:draft elements in app:control MUST be zero or
              one. Its value MUST be one of "yes" or "no". A value of "no" indicates
              a client request that the Member Resource be made publicly visible. If the
              app:draft element is missing then the value MUST be understood to
              be "no". The inclusion of the app:draft element represents a
              request by the client to control the visibility of a Member
              Resource and the app:draft element MAY be ignored by the server.
            </t>
          </section>

        </section>

           </section>

           <section toc="default" title="Securing the Atom Protocol">

               <t>All instances of publishing Atom Format entries SHOULD be protected
                   by authentication to prevent posting or editing by unknown sources.
                   <cref>note: this section is currently under discussion.</cref>
               </t>
           </section>

      <section toc="default" title="Security Considerations">
          <t>
              The security of the Atom Protocol is based on <cref>note: refers to incomplete
                  section</cref>.
          </t>

          <t>
              <cref>
                  note: talk here about denial of service attacks using large XML
                  files, or the billion laughs DTD attack.
              </cref>
          </t>
      </section>
      <section toc="default" anchor="iana" title="IANA Considerations">

          <section toc="default" anchor="iana-atomserv" title="Content-type registration for 'application/atomserv+xml'">

          <t>An Atom Publishing Protocol Service Document, when serialized
          as XML 1.0, can be identified with the following media type:</t>

          <t>
              <list style="hanging">
                  <t hangText="MIME media type name:"> application</t>
                  <t hangText="MIME subtype name:"> atomserv+xml</t>
                  <t hangText="Mandatory parameters:"> None.</t>
                  <t hangText="Optional parameters:">
                      <list style="hanging">
                          <t hangText='"charset":'> This parameter has identical
                              semantics to the charset parameter of the
                              "application/xml" media type as specified in <xref target="RFC3023" pageno="false" format="default"></xref>.</t>
                      </list>
                  </t>

                  <t hangText="Encoding considerations:"> Identical to those of
                      "application/xml" as described in <xref target="RFC3023" pageno="false" format="default"></xref>,
                      section 3.2.</t>

                  <t hangText="Security considerations:"> As defined in this
                      specification. <cref>update upon publication</cref></t>

                  <t>In addition, as this media type uses the "+xml" convention,
                      it shares the same security considerations as described in
                      <xref target="RFC3023" pageno="false" format="default"></xref>, section 10.</t>

                  <t hangText="Interoperability considerations:"> There are no
                      known interoperability issues.</t>

                  <t hangText="Published specification:"> This
                      specification. <cref>update upon publication</cref></t>

                  <t hangText="Applications that use this media type:"> No known
                      applications currently use this media type.</t>

              </list>
          </t>

          <t>Additional information:</t>

          <t>
              <list style="hanging">

                  <t hangText="Magic number(s):"> As specified for
                      "application/xml" in <xref target="RFC3023" pageno="false" format="default"></xref>, section
                      3.2.</t>

                  <t hangText="File extension:"> .atomsrv</t>

                  <t hangText="Fragment identifiers:"> As specified for
                      "application/xml" in <xref target="RFC3023" pageno="false" format="default"></xref>, section 5.</t>

                  <t hangText="Base URI:"> As specified in <xref target="RFC3023" pageno="false" format="default"></xref>, section 6.</t>

                  <t hangText="Macintosh File Type code:"> TEXT</t>

                  <t hangText="Person and email address to contact for further information:"> Joe Gregorio &lt;joe@bitworking.org&gt;</t>

                  <t hangText="Intended usage:">
                      COMMON</t> <t hangText="Author/Change controller:"> This
                      specification's author(s). <cref>update upon publication</cref></t>
              </list>
          </t>
      </section>

      <section toc="default" anchor="iana-atomcat" title="Content-type registration for 'application/atomcat+xml'">

          <t>An Atom Publishing Protocol Category Document, when serialized
          as XML 1.0, can be identified with the following media type:</t>

          <t>
              <list style="hanging">
                  <t hangText="MIME media type name:"> application</t>
                  <t hangText="MIME subtype name:"> atomcat+xml</t>
                  <t hangText="Mandatory parameters:"> None.</t>
                  <t hangText="Optional parameters:">
                      <list style="hanging">
                          <t hangText='"charset":'> This parameter has identical
                              semantics to the charset parameter of the
                              "application/xml" media type as specified in <xref target="RFC3023" pageno="false" format="default"></xref>.</t>
                      </list>
                  </t>

                  <t hangText="Encoding considerations:"> Identical to those of
                      "application/xml" as described in <xref target="RFC3023" pageno="false" format="default"></xref>,
                      section 3.2.</t>

                  <t hangText="Security considerations:"> As defined in this
                      specification. <cref>update upon publication</cref></t>

                  <t>In addition, as this media type uses the "+xml" convention,
                      it shares the same security considerations as described in
                      <xref target="RFC3023" pageno="false" format="default"></xref>, section 10.</t>

                  <t hangText="Interoperability considerations:"> There are no
                      known interoperability issues.</t>

                  <t hangText="Published specification:"> This
                      specification. <cref>update upon publication</cref></t>

                  <t hangText="Applications that use this media type:"> No known
                      applications currently use this media type.</t>

              </list>
          </t>

          <t>Additional information:</t>

          <t>
              <list style="hanging">

                  <t hangText="Magic number(s):"> As specified for
                      "application/xml" in <xref target="RFC3023" pageno="false" format="default"></xref>, section
                      3.2.</t>

                  <t hangText="File extension:"> .atomcat</t>

                  <t hangText="Fragment identifiers:"> As specified for
                      "application/xml" in <xref target="RFC3023" pageno="false" format="default"></xref>, section 5.</t>

                  <t hangText="Base URI:"> As specified in <xref target="RFC3023" pageno="false" format="default"></xref>, section 6.</t>

                  <t hangText="Macintosh File Type code:"> TEXT</t>

                  <t hangText="Person and email address to contact for further information:"> Joe Gregorio &lt;joe@bitworking.org&gt;</t>

                  <t hangText="Intended usage:">
                      COMMON</t> <t hangText="Author/Change controller:"> This
                      specification's author(s). <cref>update upon publication</cref></t>
              </list>
          </t>
      </section>


          
      </section>


  </middle>
  <back>


      <references title="Normative References">

          

<reference anchor="RFC2119">

<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname="Scott Bradner" surname="Bradner" initials="S.">
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date month="March" year="1997"></date>
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list style="empty">
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name="BCP" value="14"></seriesInfo>
<seriesInfo name="RFC" value="2119"></seriesInfo>
<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt" octets="4723"></format>
<format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc2119.html" octets="14486"></format>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml" octets="5661"></format>
</reference>

          
          
          

<reference anchor="RFC2616">

<front>
<title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title>
<author fullname="Roy T. Fielding" surname="Fielding" initials="R.">
<organization abbrev="UC Irvine">Department of Information and Computer Science</organization>
<address>
<postal>
<street>University of California, Irvine</street>
<city>Irvine</city>
<region>CA</region>
<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author fullname="James Gettys" surname="Gettys" initials="J.">
<organization abbrev="Compaq/W3C">World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>jg@w3.org</email></address></author>
<author fullname="Jeffrey C. Mogul" surname="Mogul" initials="J.">
<organization abbrev="Compaq">Compaq Computer Corporation</organization>
<address>
<postal>
<street>Western Research Laboratory</street>
<street>250 University Avenue</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94305</code></postal>
<email>mogul@wrl.dec.com</email></address></author>
<author fullname="Henrik Frystyk Nielsen" surname="Frystyk" initials="H.">
<organization abbrev="MIT/LCS">World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>frystyk@w3.org</email></address></author>
<author fullname="Larry Masinter" surname="Masinter" initials="L.">
<organization abbrev="Xerox">Xerox Corporation</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<email>masinter@parc.xerox.com</email></address></author>
<author fullname="Paul J. Leach" surname="Leach" initials="P.">
<organization abbrev="Microsoft">Microsoft Corporation</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code></postal>
<email>paulle@microsoft.com</email></address></author>
<author fullname="Tim Berners-Lee" surname="Berners-Lee" initials="T.">
<organization abbrev="MIT/LCS">World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<date month="June" year="1999"></date>
<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems. It is a generic, stateless, protocol which can be used for
   many tasks beyond its use for hypertext, such as name servers and
   distributed object management systems, through extension of its
   request methods, error codes and headers . A feature of HTTP is
   the typing and negotiation of data representation, allowing systems
   to be built independently of the data being transferred.
</t>
<t>
   HTTP has been in use by the World-Wide Web global information
   initiative since 1990. This specification defines the protocol
   referred to as "HTTP/1.1", and is an update to RFC 2068 .
</t></abstract></front>

<seriesInfo name="RFC" value="2616"></seriesInfo>
<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc2616.txt" octets="422317"></format>
<format type="PS" target="ftp://ftp.isi.edu/in-notes/rfc2616.ps" octets="5529857"></format>
<format type="PDF" target="ftp://ftp.isi.edu/in-notes/rfc2616.pdf" octets="550558"></format>
<format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc2616.html" octets="528063"></format>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2616.xml" octets="476536"></format>
</reference>

          

<reference anchor="RFC4287">

<front>
<title>The Atom Syndication Format</title>
<author fullname="M. Nottingham" surname="Nottingham" initials="M.">
<organization></organization></author>
<author fullname="R. Sayre" surname="Sayre" initials="R.">
<organization></organization></author>

<date month="December" year="2005"></date></front>

<seriesInfo name="RFC" value="4287"></seriesInfo>
<format type="TXT" target="http://ftp.rfc-editor.org/in-notes/rfc4287.txt"></format>
</reference>

          
          

<reference anchor="RFC3023">

<front>
<title>XML Media Types</title>
<author fullname="M. Murata" surname="Murata" initials="M.">
<organization></organization></author>
<author fullname="S. St. Laurent" surname="St. Laurent" initials="S.">
<organization></organization></author>
<author fullname="D. Kohn" surname="Kohn" initials="D.">
<organization></organization></author>
<date month="January" year="2001"></date>
<abstract>
<t>This document standardizes five new media types -- text/xml, application/xml, text/xml-external-parsed-entity, application/xml-external-parsed-entity, and application/xml-dtd -- for use in exchanging network entities that are related to the Extensible Markup Language (XML).  This document also standardizes a convention (using the suffix '+xml') for naming media types outside of these five types when those media types represent XML MIME (Multipurpose Internet Mail Extensions) entities.</t></abstract></front>

<seriesInfo name="RFC" value="3023"></seriesInfo>
<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc3023.txt" octets="86011"></format>
</reference>

          

<reference anchor="RFC3986">

<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname="T. Berners-Lee" surname="Berners-Lee" initials="T.">
<organization></organization></author>
<author fullname="R. Fielding" surname="Fielding" initials="R.">
<organization></organization></author>
<author fullname="L. Masinter" surname="Masinter" initials="L.">
<organization></organization></author>
<date month="January" year="2005"></date></front>

<seriesInfo name="STD" value="66"></seriesInfo>
<seriesInfo name="RFC" value="3986"></seriesInfo>
<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc3986.txt" octets="141811"></format>
</reference>

          

<reference anchor="RFC3987">

<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author fullname="M. Duerst" surname="Duerst" initials="M.">
<organization></organization></author>
<author fullname="M. Suignard" surname="Suignard" initials="M.">
<organization></organization></author>
<date month="January" year="2005"></date></front>

<seriesInfo name="RFC" value="3987"></seriesInfo>
<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc3987.txt" octets="111190"></format>
</reference>

          

<reference anchor="RFC2047">

<front>
<title>MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text</title>
<author fullname="K. Moore" surname="Moore" initials="K.">
<organization></organization></author>

<date month="November" year="1996"></date></front>

<seriesInfo name="RFC" value="2047"></seriesInfo>
<format type="TXT" target="http://ftp.rfc-editor.org/in-notes/rfc2047.txt"></format>
</reference>


          

<reference anchor="W3C.REC-xml-20040204">
<front>
<title>Extensible Markup Language (XML) 1.0 (Third Edition)</title>

<author fullname="F. Yergeau" surname="Yergeau" initials="F">
    <organization></organization>
</author>

<author fullname="Jean Paoli" surname="Paoli" initials="J">
    <organization></organization>
</author>

<author fullname="C. M. Sperberg-McQueen" surname="Sperberg-McQueen" initials="C">
    <organization></organization>
</author>

<author fullname="Tim Bray" surname="Bray" initials="T">
    <organization></organization>
</author>

<author fullname="Eve Maler" surname="Maler" initials="E">
    <organization></organization>
</author>

<date year="2004" day="4" month="February"></date>
</front>

<seriesInfo name="W3C REC" value="REC-xml-20040204"></seriesInfo>
<format type="HTML" target="http://www.w3.org/TR/2004/REC-xml-20040204"></format>
</reference>

          

<reference anchor="W3C.REC-xml-names-19990114">
<front>
<title>Namespaces in XML</title>

<author fullname="D. Hollander" surname="Hollander" initials="D">
    <organization></organization>
</author>

<author fullname="T Bray" surname="Bray" initials="T">
    <organization></organization>
</author>

<author fullname="A Layman" surname="Layman" initials="A">
    <organization></organization>
</author>

<date year="1999" day="14" month="January"></date>
</front>

<seriesInfo name="W3C REC" value="REC-xml-names-19990114"></seriesInfo>
<format type="HTML" target="http://www.w3.org/TR/1999/REC-xml-names-19990114"></format>
</reference>

          

<reference anchor="W3C.REC-xmlbase-20010627">
<front>
<title>XML Base</title>

<author fullname="J. Marsh" surname="Marsh" initials="J">
    <organization></organization>
</author>

<date year="2001" day="27" month="June"></date>
</front>

<seriesInfo name="W3C REC" value="W3C.REC-xmlbase-20010627"></seriesInfo>
<format type="HTML" target="http://www.w3.org/TR/2001/REC-xmlbase-20010627"></format>
</reference>

          

<reference anchor="W3C.REC-xml-infoset-20040204">
<front>
<title>XML Information Set (Second Edition)</title>

<author fullname="J. Cowan" surname="Cowan" initials="J">
    <organization></organization>
</author>

<author fullname="R Tobin" surname="Tobin" initials="R">
    <organization></organization>
</author>

<author fullname="A Layman" surname="Layman" initials="A">
    <organization></organization>
</author>

<date year="2004" day="04" month="February"></date>
</front>

<seriesInfo name="W3C REC" value="W3C.REC-xml-infoset-20040204"></seriesInfo>
<format type="HTML" target="http://www.w3.org/TR/2004/REC-xml-infoset-20040204"></format>
</reference>

      </references>

      <references title="Informative References">

  

<reference anchor="W3C.REC-webarch-20041215">
<front>
<title>Architecture of the World Wide Web, Volume One</title>

<author fullname="Norman Walsh" surname="Walsh" initials="N">
    <organization></organization>
</author>

<author fullname="Ian Jacobs" surname="Jacobs" initials="I">
    <organization></organization>
</author>

<date year="2004" day="15" month="December"></date>
</front>

<seriesInfo name="W3C REC" value="REC-webarch-20041215"></seriesInfo>
<format type="HTML" target="http://www.w3.org/TR/2004/REC-webarch-20041215"></format>
</reference>

     <reference anchor="RNC">
               <front>
             <title>RELAX NG Compact Syntax</title>
             <author fullname="James Clark" surname="Clark" initials="J.">
               <organization></organization>
             </author>
             <date year="2001" month="December"></date>
               </front>

            </reference>

      </references>
<section toc="default" title="Contributors">
  <t>
  The content and concepts within are a product of the Atom community and the Atompub Working Group.
  </t>
  <t>
  
  
  </t>
</section>

<section toc="default" anchor="schema" title="RELAX NG Compact Schema">
<t>
This appendix is informative.
</t>

<t>
The Relax NG schema explicitly excludes elements in the Atom Protocol namespace which are
not defined in this revision of the specification. Requirements for Atom Protocol
processors encountering such markup are given in Section 6.2 and Section 6.3 of
<xref target="RFC4287" pageno="false" format="default"></xref>.
</t>

<t> The Schema for Service Documents: </t>

                <figure title="">

<artwork name="app:allSchema" align="left" height="" width="" alt="" type="" xml:space="preserve">
# -*- rnc -*-
# RELAX NG Compact Syntax Grammar for the Atom Protocol

namespace app = "http://purl.org/atom/app#"
namespace atom = "http://www.w3.org/2005/Atom"
namespace xsd = "http://www.w3.org/2001/XMLSchema"
namespace xhtml = "http://www.w3.org/1999/xhtml"
namespace local = ""

start = appService

# common:attrs

atomURI = text

appCommonAttributes =
   attribute xml:base { atomURI }?,
   attribute xml:lang { atomLanguageTag }?,
   undefinedAttribute*


atomCommonAttributes = appCommonAttributes

undefinedAttribute =
  attribute * - (xml:base | xml:lang | local:*) { text }



atomLanguageTag = xsd:string {
   pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
}

atomDateConstruct =
    appCommonAttributes,
    xsd:dateTime

# app:service

appService =
   element app:service {
      appCommonAttributes,
      ( appWorkspace+
        &amp; extensionElement* )
   }

# app:workspace

appWorkspace =
   element app:workspace {
      appCommonAttributes,
      ( appCollection*
        &amp; extensionElement* )
   }

atomTitle = element atom:title { atomTextConstruct }

# app:collection

appCollection =
   element app:collection {
      appCommonAttributes,
      attribute href { atomURI  },
      ( appAccept?

        &amp; appCategories*
        &amp; extensionElement* )
   }

# app:categories

atomCategory =
    element atom:category {
       atomCommonAttributes,
       attribute term { text },
       attribute scheme { atomURI }?,
       attribute label { text }?,
       undefinedContent
    }

appInlineCategories =
    element app:categories {
        attribute fixed { "yes" | "no" }?,
        attribute scheme { atomURI }?,
        (atomCategory*)
    }

appOutOfLineCategories =
    element app:categories {
        attribute href { atomURI },
        (empty)
    }

appCategories = appInlineCategories | appOutOfLineCategories


# app:accept

appAccept =
   element app:accept {
         appCommonAttributes,
         ( appTypeValue? )
   }


appTypeValue = ( "entry" | media-type |entry-or-media-type  )
media-type = xsd:string { pattern = "entry,(.+/.+,?)*" }
entry-or-media-type = xsd:string { pattern = "(.+/.+,?)*" }
# above is an approximation, rnc doesn't support interleaved text


# Simple Extension

simpleExtensionElement =
   element * - app:* {
      text
   }

# Structured Extension

structuredExtensionElement =
   element * - app:* {
      (attribute * { text }+,
         (text|anyElement)*)
    | (attribute * { text }*,
       (text?, anyElement+, (text|anyElement)*))
   }

# Other Extensibility

extensionElement =
   simpleExtensionElement | structuredExtensionElement

undefinedContent = (text|anyForeignElement)*

# Extensions

anyElement =
   element * {
      (attribute * { text }
       | text
       | anyElement)*
   }

anyForeignElement =
    element * - atom:* {
       (attribute * { text }
        | text
        | anyElement)*
    }

atomPlainTextConstruct =
    atomCommonAttributes,
    attribute type { "text" | "html" }?,
    text

atomXHTMLTextConstruct =
    atomCommonAttributes,
    attribute type { "xhtml" },
    xhtmlDiv

atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct

anyXHTML = element xhtml:* {
    (attribute * { text }
     | text
     | anyXHTML)*
}

xhtmlDiv = element xhtml:div {
  (attribute * { text }
   | text
   | anyXHTML)*
}

# EOF
</artwork>

                </figure>

<t> The Schema for Category Documents: </t>


                <figure title="">

<artwork name="app:catSchema" align="left" height="" width="" alt="" type="" xml:space="preserve">
# -*- rnc -*-
# RELAX NG Compact Syntax Grammar for the Atom Protocol

namespace app = "http://purl.org/atom/app#"
namespace atom = "http://www.w3.org/2005/Atom"
namespace xsd = "http://www.w3.org/2001/XMLSchema"
namespace local = ""

start = appCategories

# common:attrs

atomCommonAttributes =
   attribute xml:base { atomUri }?,
   attribute xml:lang { atomLanguageTag }?,
   undefinedAttribute*

undefinedAttribute =
  attribute * - (xml:base | xml:lang | local:*) { text }

atomUri = text

atomLanguageTag = xsd:string {
   pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
}


atomCategory =
    element atom:category {
       atomCommonAttributes,
       attribute term { text },
       attribute scheme { atomUri }?,
       attribute label { text }?,
       undefinedContent
    }

appInlineCategories =
    element app:categories {
        attribute fixed { "yes" | "no" }?,
        attribute scheme { atomUri }?,
        (atomCategory*)
    }

appOutOfLineCategories =
    element app:categories {
        attribute href { atomURI },
        (empty)
    }

appCategories = appInlineCategories | appOutOfLineCategories


# Extensibility

undefinedContent = (text|anyForeignElement)*

anyElement =
   element * {
      (attribute * { text }
       | text
       | anyElement)*
   }

anyForeignElement =
    element * - atom:* {
       (attribute * { text }
        | text
        | anyElement)*
    }

# EOF
</artwork>

                </figure>

           </section>





           <section toc="default" title="Revision History">
<t>draft-ietf-atompub-protocol-10: PaceRemoveTitleHeader2, PaceSlugHeader4,
PaceOnlyMemberURI,PaceOneAppNamespaceOnly, PaceAppCategories,
PaceExtendIntrospection, UseElementsForAppCollectionTitles3, renamed
Introspection to Service, lots of good editorials suggestions, updated
media example with slug, moved xml conventions to convention
sections, renamed XMl related Conventions to Atom Publishing Protocol Documents,
added auth header to examples, consolidated definition of all resource types into
the model section, added IANA reg info for application/atomcat+xml.

</t>

<t>draft-ietf-atompub-protocol-09: PaceWorkspaceMayHaveCollections, PaceMediaEntries5,
    http://www.imc.org/atom-protocol/mail-archive/msg05322.html, and
    http://www.imc.org/atom-protocol/mail-archive/msg05272.html
</t>

<t>draft-ietf-atompub-protocol-08: added infoset ref; added wording re IRI/URI; fixed URI/IRI ;
next/previous fixed as per Atom LinkRelations Attribute (http://www.imc.org/atom-protocol/mail-archive/msg04095.html);
incorporated: PaceEditLinkMustToMay; PaceMissingDraftHasNoMeaning, PaceRemoveMemberTypeMust, PaceRemoveMemberTypePostMust,
PaceTitleHeaderOnlyInMediaCollections, PacePreserveForeignMarkup, PaceClarifyTitleHeader, PaceClarifyMediaResourceLinks,
PaceTwoPrimaryCollections;
</t>

             <t>draft-ietf-atompub-protocol-07: updated Atom refs to RFC4287;
             incorporated PaceBetterHttpResponseCode;
             PaceClarifyCollectionAndDeleteMethodByWritingLessInsteadOfMore;
             PaceRemoveAcceptPostText; PaceRemoveListTemplate2;
             PaceRemoveRegistry; PaceRemoveWhoWritesWhat;
             PaceSimplifyClarifyBetterfyRemoveBogusValidityText;
             PaceCollectionOrderSignificance; PaceFixLostIntrospectionText;
             PaceListPaging; PaceCollectionControl; element typo in Listing
             collections para3 (was app:member-type, not app:list-template);
             changed post atom entry example to be valid. Dropped inline use of
             'APP'. Removed nested diagram from section 4. Added ed notes in the
             security section.

             </t>

               <t>draft-ietf-atompub-protocol-06 - Removed: Robert Sayre from the
                   contributors section per his request.
                   Added in PaceCollectionControl. Fixed all the {daterange} verbage
                   and examples so they all use a dash.  Added full rnc schema.
                   Collapsed Introspection and Collection documents into a single
                   document. Removed {dateRange} queries. Renamed search to list.
                   Moved discussion of media and entry collection until
                   later in the document and tied the discussion to the
                   Introspection element app:member-type.
               </t>

               <t>draft-ietf-atompub-protocol-05 - Added: Contributors section.  Added:
                   de hOra to editors.  Fixed: typos.  Added diagrams and description to
                   model section. Incorporates PaceAppDocuments, PaceAppDocuments2,
                   PaceSimplifyCollections2 (large-sized chunks of it anyhow: the notions
                   of Entry and Generic resources, the section 4 language on the Protocol
                   Model, 4.1 through 4.5.2, the notion of a Collection document, as in
                   Section 5 through 5.3, Section 7 "Collection resources", Selection
                   resources (modified from pace which talked about search); results in
                   major mods to Collection Documents, Section 9.2 "Title: Header" and
                   brokeout para to section 9.1 Editing Generic Resources). Added XML
                   namespace and language section. Some cleanup of front matter.  Added
                   Language Sensitivity to some attributes. Removed resource descriptions
                   from terminology. Some juggling of sections. See:
                   http://www.imc.org/atom-protocol/mail-archive/msg01812.html.
               </t>

               <t>draft-ietf-atompub-protocol-04 -
                   Add ladder diagrams, reorganize, add SOAP interactions
               </t>

               <t>draft-ietf-atompub-protocol-03 -
                   Incorporates PaceSliceAndDice3 and PaceIntrospection.
               </t>


               <t>draft-ietf-atompub-protocol-02 -
                   Incorporates Pace409Response, PacePostLocationMust,
                   and PaceSimpleResourcePosting.
               </t>

               <t>draft-ietf-atompub-protocol-01 -
                   Added in sections on Responses for the EditURI.
                   Allow 2xx for response to EditURI PUTs.
                   Elided all mentions of WSSE. Started adding in some
                   normative references. Added the section "Securing the
                   Atom Protocol". Clarified that it is possible that the PostURI and FeedURI
                   could be the same URI. Cleaned up descriptions for Response codes
                   400 and 500.
               </t>
               <t>Rev draft-ietf-atompub-protocol-00 - 5Jul2004 -
                   Renamed the file and re-titled the document to conform
                   to IETF submission guidelines. Changed MIME type to match the one
                   selected for the Atom format. Numerous typographical fixes.
                   We used to have two 'Introduction' sections. One of them was
                   moved into the Abstract the other absorbed the Scope section.
                   IPR and copyright notifications were added.
               </t>
               <t>Rev 09 - 10Dec2003 - Added the section on SOAP enabled clients
                   and servers.</t>

               <t>Rev 08 - 01Dec2003 - Refactored the specification, merging the Introspection
                  file into the feed format. Also dropped the distinction between the
                  type of URI used to create new entries and the kind used to create comments.
                  Dropped user preferences.</t>

                <t>Rev 07 - 06Aug2003 - Removed the use of the RSD file for auto-discovery. Changed copyright
                    until a final standards body is chosen. Changed query parameters for the search facet
                    to all begin with atom- to avoid name collisions. Updated all the Entries to follow
                    the 0.2 version. Changed the format of the search results and template file
                    to a pure element based syntax.
                </t>

                <t>Rev 06 - 24Jul2003 - Moved to PUT for updating Entries.
                    Changed all the mime-types to application/x.atom+xml. Added template
                    editing. Changed 'edit-entry' to 'create-entry' in the Introspection file
                    to more accurately reflect its purpose.
                </t>

                <t>Rev 05 - 17Jul2003 - Renamed everything Echo into Atom. Added
                    version numbers in the Revision history.
                    Changed all the mime-types to application/atom+xml.
                </t>

                <t>Rev 04 - 15Jul2003 - Updated the RSD version used from 0.7 to 1.0. Change the method of deleting
                    an Entry from POSTing &lt;delete/&gt; to using the HTTP DELETE verb. Also changed the
                    query interface to GET instead of POST. Moved Introspection Discovery to be up under
                    Introspection. Introduced the term 'facet' for the services listed in the Introspection file.
                </t>

                <t>Rev 03 - 10Jul2003 - Added a link to the Wiki near the front of the
                    document. Added a section on finding an Entry. Retrieving an Entry
                    now broken out into its own section. Changed the HTTP status code for
                    a successful editing of an Entry to 205.
                </t>

                <t>Rev 02 - 7Jul2003 - Entries are no longer returned from POSTs, instead they are retrieved via GET.
                    Cleaned up figure titles, as they are rendered poorly in HTML. All content-types
                    have been changed to application/atom+xml.
                </t>

                <t>Rev 01 - 5Jul2003 - Renamed from EchoAPI.html to follow the more commonly used format:
                    draft-gregorio-NN.html. Renamed all
                    references to URL to URI. Broke out introspection into its own section. Added the Revision History section.
                    Added more to the warning that the example URIs are not normative.
                </t>
            </section>

    </back>
      </rfc>