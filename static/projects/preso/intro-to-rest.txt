Hi, I'm Joe Gregorio and I work at Google in Developer Relations.
This talk in on REST and in the talk I presume
you are familiar with the Atom Publishing Protocol.
If you aren't then you can watch my video "An Introduction
to the Atom Publishing Protocol" and then come back and 
watch this video.

So let's begin.

What is REST?
=============

You may have seen or heard the term REST, which comes from 
Roy Fielding's Thesis and stands for Representational State Transfer.
It is an architectural style. Now an architectural style is
an abstraction, as opposed to a concrete thing. For example, 
this shaker house is different than the Shaker Architectural Style.
The "architectural style" of Shaker defines the attributes you 
would see in a house built in that style. In the same way, the 
REST Architectural Style is a set of architectural constraints
you should see in a protocol built in that style. HTTP is one such
protocol, and for the remainder of this talk we're going to 
just talk about HTTP. 

Scoping, talk about HTTP as the only example
============================================

Now it's simply not possibe to cover every aspect of HTTP 
in a short video like this one, for example 
RFC 2616, the specification that covers HTTP, is 176 pages long
and RFC 3986, which covers URIs, is 61 pages long, and 
Roy Fielding's Thesis is 162 pages long. That's a lot of material, but
by the end of this video you should have enough of an overview
to dive into those specfications if you're so inclined.


Why should you care?
====================

So why should you care about REST? It's the architecture
of the web as it works today, and if you're going to be
building applications that run on the web, shouldn't you 
be working *with* that architecture, instead of against it?


Hopefully you'll see as we go through this video that there are
many opportunities to increase the performance and scalibity
of your application, and solve some traditionally tricky problems
by working with HTTP and taking full advantage
of it's capabilities.

An example HTTP Request/Response
================================

Let's get some of the basics down, some nomenclature
and operation of HTTP.

At its simplest HTTP is a simple request-response protocol, your browser
makes a request and the server sends a response.
The beauty of the web is that it appears very simple, as if 
your browser talks directly to a single server. 


       Client - Server


Here is a HTTP request


       GET /news/ HTTP/1.1
       Host: example.org
       accept-encoding: compress, gzip
       user-agent: Python-httplib2


And this is a response to that request


       HTTP/1.1 200 Ok
       Date: Thu, 07 Aug 2008 15:06:24 GMT
       Server: Apache
       etag: "85a1b765e8c01dbf872651d9eaa6d7a5"
       Vary: Accept-Encoding,User-Agent
       Connection: close
       Transfer-Encoding: chunked
       Content-Type: text/html; charset=utf-8
       Cache-Control: max-age=3600

       <!DOCTYPE HTML>
       <html>
         <head>
	     <link href="/css/b/base.css" type="text/css" rel="stylesheet">
	     <script type="text/javascript" src="utility.js"></script>
             <title>Some Example Site </title> 
         </head>
         <body>
           <p><img src="logo.png">
        ...


[[ Insert a bunch of slides highlighting each part of the 
   request: 

  Resources
  Representations ( hypertext, COD )
  Method
  Control Headers

]]

The Body  | +representation
--------

  Hypertext
  Code

The URI | +URI
-------
   The URI we are requesting is http://bitworking.org/news/. It gets broken up 
   between the Host: header and the Request Line. The Host: is the name
   of the server and the client looks up that name in DNS and then sends
   the request off. So we already have a point of decoupling, where
   we can use DNS rotation to send requests to a pool of servers with
   different IP addresses.

   The rest of the URI is that path and query parameters. This can 
   be used by a gateway to decide which server to forward the request to.


The Method   | +Methods
----------
   Different methods have different semantics and from those semantics.

   GET and HEAD are safe. 

   GET, HEAD, PUT and DELETE are idempotent. (The client could automatically
     retry the operation if it did not complete the first time).

Control Headers | +Cache
---------------
   Cache-Control:  Allows both the client and server to control how 
     caching is done, obviously very important to caching intermediaries.

   If-Match:


Representation Metadata  | +Content-type
-----------------------

  last-modified:
  media-type
  Etag:


  Content-type: determines the type of the body
     Intermediary can perform manipulations on body (accelerators, etc)


  Note that the changes it makes can be determined by 'context', i.e. probably
  won't change an image in a POST or PUT, but could 

  - Hypertext

    gives you links to follow






What are the characteristics of a RESTful system?
=================================================

    * Resource - Application state and functionality are abstracted into resources
      * URI - Every resource is uniquely addressable using a universal syntax for use in hypermedia links
      * Uniform Interface - All resources share a uniform interface for the transfer of state between client and resource, consisting of
          o Methods - A constrained set of well-defined operations
          o Representation - A constrained set of content types, optionally supporting code on demand
    * A protocol which is:
          o Client-server
          o Stateless
          o Cacheable
          o Layered


We've already covered the resouce parts, now let's look 
at the protocol layer.  

   Client - Server

Now let's switch to the right name:

   User Agent - Origin Server  

Now the request-response of HTTP is both a client-server
interaction, and stateless.


   User Agent - Origin Server  |  Client-server + Stateless


But the reality is more complicated than that. There can be many intermediaries
between you and the server you're connecting to.
By "intermediaries" we mean "HTTP intermediaries", which 
doesn't include devices at lower levels in the protocol stack 
like routers, modems, and access points.

   User Agent - Intermediaries - Origin Server | +Layered

Intermediaries include proxies and gateways. Proxies
are chosen by the client, while gateways are chosen by the origin
server or are imposed by the network.

   User Agent - Proxies - Gateways - Origin Server

Each of those intermediaries can provide different services
such as data translation, performance enhancement, and security.

Each of the systems along the path, starting with the 
User Agent and going all the way to the Origin Server
can do caching.


   User Agent($) - Proxies($) - Gateways($) - Origin Server($)  | +Cacheable


Intermediaries, for the most part, look at the headers.
Some can peek inside the body, for example web accelerators
will cache and transform some images to smaller versions, 
but they do that only after looking at the headers to
determine the kind of message they are handling.

So an important aspect is that the information available in the
headers of a request and a response, that info is
what's available to the intermediaries.
The more information - the better a job the intermediaries can do.


Benefits
========

We said all of this infrastructure has benefits, what are
they? Realizing that we only get benefits if we structure
our service correctly.

network performance

user perceived performance (pre-fetching)
efficiency - don't use the network (caching, COD)
scalability - decentralization, layered, monitoring

simplicity
evolvability
extensibility
customizability
configuration
reusability
visibility
portability
reliability



So all of this infrastructure is there, but depending
on how we structure our service we may or may not get
any benefits from all that infrastructure. Let's look
at two examples:
    


Look at two services:

This is actually a an example of something that isn't RESTful, that
doesn't take full advantage of the capabilities of HTTP.

POST /RPC2 HTTP/1.0
User-Agent: Frontier/5.1.2 (WinNT)
Host: betty.userland.com
Content-Type: text/xml
Content-length: 181

<?xml version="1.0"?> 
<methodCall> 
  <methodName>examples.getStateName</methodName> 
  <params> 
    <param> 
      <value><i4>41</i4></value> 
    </param> 
  </params> 
</methodCall> 


HTTP/1.1 200 OK
Connection: close
Content-Length: 158
Content-Type: text/xml
Date: Fri, 17 Jul 1998 19:55:08 GMT
Server: UserLand Frontier/5.1.2-WinNT

<?xml version="1.0"?> 
<methodResponse> 
  <params> 
    <param> 
      <value><string>South Dakota</string></value> 
    </param> 
  </params> 
</methodResponse> 


You can multiple methods at the same URI, and different
methods are called by changing the value of 'methodName'.

So what do the intermediaries see of this request/response?
Is it safe?       No.
It is idempotent? No.
Cacheable?        No.

Representation is a generic 'text/xml'. No reason
for a generic intermediary to do anything with that.

No ability to route different calls to different machines.
(You can do it, but it would require a custom
 gateway that understood XML-RPC.)

All requests go to the same URI, which means
that if you were going to distribute many
such calls among a group of origin servers you
would have to look inside the body for the methodName.

This gives the least amount of information to the
web, and thus doesn't get any help from intermediaries,
and doesn't scale with off the shelf parts.

   XML-RPC (something specific)
   - All the same URI
   - Only POST (not safe, not idempotent)
   - No gzip


Start by GETing a Service Document:

]]

$ curl --include "http://bitworking.org/projects/apptestsite/app.cgi/service/;service_document"

HTTP/1.1 200 Ok
Date: Thu, 14 Aug 2008 23:26:31 GMT
Server: Apache
Content-Length: 753
Vary: Accept-Encoding,User-Agent
Connection: close
Content-Type: application/atomsvc+xml; charset=utf-8

<?xml version="1.0" encoding="utf-8"?>
<service xmlns="http://www.w3.org/2007/app" xmlns:atom="http://www.w3.org/2005/Atom">
  <workspace>
    <atom:title>AtomPub Test Site</atom:title>
      <collection href="entry/">
           <atom:title>entry</atom:title>
           <accept>application/atom+xml;type=entry</accept>
         <categories fixed="yes" />
      </collection>
      <collection href="draft/">
           <atom:title>draft</atom:title>
           <accept>application/atom+xml;type=entry</accept>
         <categories fixed="yes" />
      </collection>
      <collection href="media/">
           <atom:title>media</atom:title>
        <accept>*/*</accept>
         <categories fixed="yes" />
      </collection>
  </workspace>
</service>

Safe, idempotent, cacheable, gzippable, hypertext!

Contains the URIs for each of the collections.
Once we have a collection URI we can POST an entry
to create a new member, and then GET/PUT/DELETE 
the members at their own URIs.

Now we can GET the contents of the first collection:


$ curl --include "http://bitworking.org/projects/apptestsite/app.cgi/service/entry/"
HTTP/1.1 200 Ok
Date: Fri, 15 Aug 2008 00:45:38 GMT
Server: Apache
etag: "a0ec057a98596e14ccac1d47b3458081"
Content-Length: 11957
Vary: Accept-Encoding,User-Agent
Connection: close
Content-Type: application/atom+xml; charset=utf-8

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:app="http://www.w3.org/2007/app">
   <title type="text">BitWorking | Joe Gregorio</title>
   <link href="http://bitworking.org/projects/apptestsite/app.cgi/service/entry/" rel="self" />
   <link href="http://bitworking.org/" rel="alternate" />
   <link href="?page=1" rel="next" />
   <icon>http://bitworking.org/favicon.ico</icon>
   <updated>2008-08-13T11:43:37.748186-04:00</updated>
   <author>
      <name>Joe Gregorio</name>
   </author>
   <id>http://bitworking.org/</id>
   <entry>
     <title>10</title>
     <link href="http://bitworking.org/news/381/10" />
     <link href="381/" rel="edit" />


Safe, idempotent, cacheable, gzippable, hypertext!

If we want to add an entry to the collection we POST
and entry to the URI of the collection.
It is still more hypertext because of the "edit" URIs.

You can send a GET to the edit URI of an entry to
retieve it. Then you can modify and PUT it back to 
that same URI. If you want to DELETE it you can send
DELETE to the same URI!

Here is where some of the Control Headers we saw earlier
come into play. Remember that we can use an ETag to avoid
retrieving the representation if it's unchaned? They also
work here for PUT, but instead of using an If-None-Match:
header we can use an If-Match: header, that way the 
PUT will fail if someone has already changed the entry.
This is a solution to the so-called "lost update" problem.

Same for PUT/DELETE to member URI.


   AtomPub
   - Each resource gets its own URI
   - four methods
   - cacheable, safe, idempotent
   - gzip
   - if-match for lost updates
   - composability/federation
   - extensibility
   - monitoring

Outline a bunch of examples and give the parts of REST
that enable those scenarios. Mnot examples too, 
such as:

 * editable resources
 * infinte image caching.
 * post only once, infinite URI space
 


How to design a RESTful protocol
================================

Resources
Representations
Methods
   - there are POST-only resources, but they are rare, unlike XML-RPC

