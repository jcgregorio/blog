<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://bitworking.org/news/feed/index.atom" rel="self" type="application/atom+xml" /><link href="https://bitworking.org/" rel="alternate" type="text/html" /><updated>2018-02-28T09:32:54-05:00</updated><id>https://bitworking.org/</id><title type="html">BitWorking</title><subtitle>Joe Gregorio - REST, Web, Python, Go, APIs, Dad, Husband, Maker, or any linear combination of such. Googler.
</subtitle><entry><title type="html">2 factor auth and planes</title><link href="https://bitworking.org/news/2018/02/2-factor-auth-and-planes" rel="alternate" type="text/html" title="2 factor auth and planes" /><published>2018-02-28T00:00:00-05:00</published><updated>2018-02-28T09:32:50-05:00</updated><id>https://bitworking.org/news/2018/02/2-factor-auth-and-planes</id><content type="html" xml:base="https://bitworking.org/news/2018/02/2-factor-auth-and-planes">&lt;p&gt;I have just discovered a downside to using SMS as a 2-factor
authentication method, as I sit here at 30,000 ft, unable to
login to github.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">I have just discovered a downside to using SMS as a 2-factor authentication method, as I sit here at 30,000 ft, unable to login to github.</summary></entry><entry><title type="html">Shadow DOM and CSS</title><link href="https://bitworking.org/news/2018/02/shadow-dom-and-css" rel="alternate" type="text/html" title="Shadow DOM and CSS" /><published>2018-02-10T00:00:00-05:00</published><updated>2018-02-17T16:34:12-05:00</updated><id>https://bitworking.org/news/2018/02/shadow-dom-and-css</id><content type="html" xml:base="https://bitworking.org/news/2018/02/shadow-dom-and-css">&lt;p&gt;
  I love custom elements! I've been building UIs with them since Polymer 0.5
  was announced in 2014. One of the things that I've questioned with custom
  elements has been Shadow DOM and its relationship to CSS. This page is an
  experiment for comparing custom elements with and without Shadow DOM. Press
  the buttons below and 1,000 spinners will be displayed on the page, when 'Light'
  is pressed the custom element uses CSS defined for the whole page, and when
  'Shadow' is pressed the custom elements have a style sheet attached to their
  Shadow DOM, and when 'External' is pressed the CSS for the element is still
  encapsulated in the Shadow DOM, but it is loaded as an external stylesheet.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;N.B.&lt;/strong&gt; I am not loading any polyfills on this page, so it
  will only work on browsers with native custom elements support.
&lt;/p&gt;

&lt;p&gt;
  This is the code that is running:
&lt;/p&gt;

&lt;h2&gt;CSS&lt;/h2&gt;
&lt;pre id=style_code&gt;&lt;/pre&gt;
&lt;h2&gt;Javascript&lt;/h2&gt;
&lt;pre id=js_code&gt;&lt;/pre&gt;

&lt;style type=&quot;text/css&quot; media=&quot;screen&quot; id=style&gt;
spinner-light {
  margin: 6px;
  display: none;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  border: 8px solid #A6CEE3;
  border-left: 8px solid #1F78B4;
  animation: spinner-light-spin 1.5s infinite linear;
}

spinner-light[active] {
  display: inline-block;
}

@keyframes spinner-light-spin {
  0% {
    transform:
    rotate(0deg);
  }
  100% {
    transform:
    rotate(360deg);
  }
}
&lt;/style&gt;

&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; id=code&gt;
function upgradeProperty(ele, prop) {
  if (ele.hasOwnProperty(prop)) {
    let value = ele[prop];
    delete ele[prop];
    ele[prop] = value;
  }
}

window.customElements.define('spinner-light', class extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    upgradeProperty(this, 'active');
  }

  get active() { return this.hasAttribute('active'); }
  set active(val) {
    if (val) {
      this.setAttribute('active', '');
    } else {
      this.removeAttribute('active');
    }
  }
});

window.customElements.define('spinner-shadow', class extends HTMLElement {
  constructor() {
    super();
    const shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.innerHTML = `
      &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
@keyframes spinner-shadow-spin {
  0% {
    transform:
    rotate(0deg);
  }
  100% {
    transform:
    rotate(360deg);
  }
}

:host {
  margin: 6px;
  display: none;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  border: 8px solid #A6CEE3;
  border-left: 8px solid #1F78B4;
  animation: spinner-shadow-spin 1.5s infinite linear;
}

:host([active]) {
  display: inline-block;
}
&lt;/style&gt;
`;
	}

  connectedCallback() {
    upgradeProperty(this, 'active');
  }

  get active() { return this.hasAttribute('active'); }
  set active(val) {
    if (val) {
      this.setAttribute('active', '');
    } else {
      this.removeAttribute('active');
    }
  }
});

window.customElements.define('spinner-external', class extends HTMLElement {
  constructor() {
    super();
    const shadowRoot = this.attachShadow({mode: 'open'});
    shadowRoot.innerHTML = `
      &lt;link rel=&quot;stylesheet&quot; href=&quot;/images/2018/spinner-styles.css&quot;&gt;`;
	}

  connectedCallback() {
    upgradeProperty(this, 'active');
  }

  get active() { return this.hasAttribute('active'); }
  set active(val) {
    if (val) {
      this.setAttribute('active', '');
    } else {
      this.removeAttribute('active');
    }
  }
});
&lt;/script&gt;

&lt;p&gt;
  The &lt;code&gt;spinner-shadow&lt;/code&gt; element follows the &lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/best-practices#create-a-shadow-root-to-encapsulate-styles&quot;
    &gt;suggested best practice&lt;/a&gt; of encapsulating the styles via the shadow
  root. But this seems problematic for a couple of reasons. The first is that
  it's going to be difficult to pass that CSS through an autoprefixer or any
  other tooling. The second problem is that this means the CSS will get
  duplicated for every instance of the element.  You can see that by looking
  in Chrome Dev Tools, that there are 3,000 more nodes on this page when the
  shadow spinners are displayed as compared to when the light spinners are
  displayed.
&lt;/p&gt;
&lt;p&gt;
  The &lt;code&gt;spinner-external&lt;/code&gt; loads the CSS in the Shadow DOM but uses
  an external stylesheet, which does seem to reduce the number of nodes to
  below that of the &lt;code&gt;spinner-shadow&lt;/code&gt;, but still not close to
  &lt;code&gt;spinner-light&lt;/code&gt;. Also, I don't want to have a separate HTTP
  request for every element class I use on a page, so this also seems like
  a non-starter.
&lt;/p&gt;
&lt;p&gt;
  So am I holding it wrong? Is there really no way in custom elements to
  specify the CSS for an element once without resorting to external CSS
  stylesheets? Or am I reading the Chrome Dev Console page wrong and the
  Node count doesn't mean what I think it means? I think for now I'm going to
  stick to avoiding Shadow DOM and specifying the CSS just once in a single
  stylesheet.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Update:&lt;/strong&gt; It does look like this is a known issue as there's &lt;a
    href=&quot;https://github.com/w3c/webcomponents/issues/468&quot;&gt;a proposal to
    address it in custom elements spec&lt;/a&gt;.
&lt;/p&gt;

&lt;button id=light&gt;Light&lt;/button&gt;
&lt;button id=shadow&gt;Shadow&lt;/button&gt;
&lt;button id=external&gt;External&lt;/button&gt;

&lt;div id=manyspinners&gt;
	&lt;spinner-light active&gt;&lt;/spinner-light&gt;
	&lt;spinner-shadow active&gt;&lt;/spinner-shadow&gt;
	&lt;spinner-external active&gt;&lt;/spinner-external&gt;
&lt;/div&gt;

&lt;script&gt;
let manyspinners = document.getElementById('manyspinners');

const clear = () =&gt; {
  while (manyspinners.firstChild) {
    manyspinners.removeChild(manyspinners.firstChild);
  }
}

document.getElementById('light').addEventListener('click', e =&gt; {
  clear();
  let spinner = document.createElement('spinner-light');
  spinner.active = true;
  for (var i = 0; i &lt; 1000; i++) {
    manyspinners.appendChild(spinner.cloneNode(true));
  }
});

document.getElementById('shadow').addEventListener('click', e =&gt; {
  clear();
  let spinner = document.createElement('spinner-shadow');
  spinner.active = true;
  for (var i = 0; i &lt; 1000; i++) {
    manyspinners.appendChild(spinner.cloneNode(true));
  }
});

document.getElementById('external').addEventListener('click', e =&gt; {
  clear();
  let spinner = document.createElement('spinner-external');
  spinner.active = true;
  for (var i = 0; i &lt; 1000; i++) {
    manyspinners.appendChild(spinner.cloneNode(true));
  }
});

document.getElementById('style_code').textContent = document.getElementById('style').textContent;
document.getElementById('js_code').textContent = document.getElementById('code').textContent;
&lt;/script&gt;


&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">I love custom elements! I've been building UIs with them since Polymer 0.5 was announced in 2014. One of the things that I've questioned with custom elements has been Shadow DOM and its relationship to CSS. This page is an experiment for comparing custom elements with and without Shadow DOM. Press the buttons below and 1,000 spinners will be displayed on the page, when 'Light' is pressed the custom element uses CSS defined for the whole page, and when 'Shadow' is pressed the custom elements have a style sheet attached to their Shadow DOM, and when 'External' is pressed the CSS for the element is still encapsulated in the Shadow DOM, but it is loaded as an external stylesheet. N.B. I am not loading any polyfills on this page, so it will only work on browsers with native custom elements support.</summary></entry><entry><title type="html">Custom Elements “Neat”</title><link href="https://bitworking.org/news/2018/02/custom-elements-neat" rel="alternate" type="text/html" title="Custom Elements &quot;Neat&quot;" /><published>2018-02-10T00:00:00-05:00</published><updated>2018-02-10T13:01:46-05:00</updated><id>https://bitworking.org/news/2018/02/custom-elements-neat</id><content type="html" xml:base="https://bitworking.org/news/2018/02/custom-elements-neat">&lt;blockquote&gt;
  &lt;dl&gt;
    &lt;dt&gt;“Neat” – as applied to drinks served in bars – refers to a shot of liquor poured directly from the bottle and into a glass. There is no chilling involved with a “neat” drink. There is never an additional ingredient in a drink served “neat”.&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://www.jeffreymorgenthaler.com/2008/up-neat-straight-up-or-on-the-rocks/&quot;&gt;Up, Neat, Straight Up, or On the Rocks&lt;/a&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements&quot;&gt;Custom Elements V1&lt;/a&gt; spec
has reached concensus and implementations are &lt;a href=&quot;https://caniuse.com/#feat=custom-elementsv1&quot;&gt;going well&lt;/a&gt;,
which is all great news, but what I find surprising is the lack of
&lt;a href=&quot;http://vanilla-js.com/&quot;&gt;VanillaJS&lt;/a&gt; custom elements on &lt;a href=&quot;https://www.webcomponents.org/&quot;&gt;WebComponents.org&lt;/a&gt;.
Doing a simple search for “vanilla” &lt;a href=&quot;https://www.webcomponents.org/search/vanilla&quot;&gt;only returns a smattering of
elements&lt;/a&gt; at this time.&lt;/p&gt;

&lt;p&gt;I’ve been working on a set of such elements myself, and went looking for
others to compare and contrast against, and was surprised to find so little.
It would be nice to have a larger selection of “neat” elements to choose from.&lt;/p&gt;

&lt;p&gt;For the curious, here’s a screenshot of the elements I’ve gotten so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/skia-elements.png&quot; alt=&quot;Screen capture of some custom elements in action.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll point to the code once it reaches a slightly less embarassing stage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">“Neat” – as applied to drinks served in bars – refers to a shot of liquor poured directly from the bottle and into a glass. There is no chilling involved with a “neat” drink. There is never an additional ingredient in a drink served “neat”. Up, Neat, Straight Up, or On the Rocks</summary></entry><entry><title type="html">StartupGrind - How Transloc Scaled in the Triangle and Exited to Ford</title><link href="https://bitworking.org/news/2018/02/startupgrind-how-transloc-scaled-in-the-triangle-and-exited-to-ford" rel="alternate" type="text/html" title="StartupGrind - How Transloc Scaled in the Triangle and Exited to Ford" /><published>2018-02-08T00:00:00-05:00</published><updated>2018-02-08T09:09:02-05:00</updated><id>https://bitworking.org/news/2018/02/startupgrind-how-transloc-scaled-in-the-triangle-and-exited-to-ford</id><content type="html" xml:base="https://bitworking.org/news/2018/02/startupgrind-how-transloc-scaled-in-the-triangle-and-exited-to-ford">&lt;p&gt;Rats, I’m going to be travelling on the 28th and will miss this StartupGrind event:
&lt;a href=&quot;How Transloc Scaled in the Triangle and Exited to Ford&quot;&gt;https://www.startupgrind.com/events/details/startup-grind-triangle-presents-how-transloc-scaled-in-the-triangle-and-exited-to-ford#/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Rats, I’m going to be travelling on the 28th and will miss this StartupGrind event: https://www.startupgrind.com/events/details/startup-grind-triangle-presents-how-transloc-scaled-in-the-triangle-and-exited-to-ford#/.</summary></entry><entry><title type="html">Paul Kinlan - A simple clientside templating language</title><link href="https://bitworking.org/news/2018/01/paul-kinlan-a-simple-clientside-templating-language" rel="alternate" type="text/html" title="Paul Kinlan - A simple clientside templating language" /><published>2018-01-31T00:00:00-05:00</published><updated>2018-01-31T21:29:26-05:00</updated><id>https://bitworking.org/news/2018/01/paul-kinlan-a-simple-clientside-templating-language</id><content type="html" xml:base="https://bitworking.org/news/2018/01/paul-kinlan-a-simple-clientside-templating-language">&lt;p&gt;Paul Kinlan’s &lt;a href=&quot;https://paul.kinlan.me/a-simple-dom-template-language/&quot;&gt;A simple clientside templating langauge&lt;/a&gt;
has a client side templating library using &lt;code class=&quot;highlighter-rouge&quot;&gt;data-&lt;/code&gt; attributes, and
the implementation comes in at around 25 lines of code. Definitely a great
example to demystify templating and demonstrate that you don’t always need a
framework or large library to get the functionality you want.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jcgregorio/stamp&quot;&gt;Stamp&lt;/a&gt; is a similar library I put
together a few years ago with the same goals in mind, but weights in at 250
lines of code.&lt;/p&gt;

&lt;p&gt;I should really update &lt;a href=&quot;https://github.com/jcgregorio/vanillajs&quot;&gt;VanillaJS&lt;/a&gt;
with a couple more ports, one each for Stamp and Paul’s library.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Paul Kinlan’s A simple clientside templating langauge has a client side templating library using data- attributes, and the implementation comes in at around 25 lines of code. Definitely a great example to demystify templating and demonstrate that you don’t always need a framework or large library to get the functionality you want.</summary></entry><entry><title type="html">Ford acquires Transloc</title><link href="https://bitworking.org/news/2018/01/ford-acquires-transloc" rel="alternate" type="text/html" title="Ford acquires Transloc" /><published>2018-01-25T00:00:00-05:00</published><updated>2018-01-25T21:29:38-05:00</updated><id>https://bitworking.org/news/2018/01/ford-acquires-transloc</id><content type="html" xml:base="https://bitworking.org/news/2018/01/ford-acquires-transloc">&lt;p&gt;Via TechCrunch: &lt;a href=&quot;https://techcrunch.com/2018/01/25/ford-acquires-autonomic-and-transloc-as-it-evolves-its-mobility-business/&quot;&gt;Ford acquires Autonomic and TransLoc as it evolves its mobility business&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s great to see another great North Carolina company get recognized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Via TechCrunch: Ford acquires Autonomic and TransLoc as it evolves its mobility business</summary></entry><entry><title type="html">Bridgy, webmentions, and publishing.</title><link href="https://bitworking.org/news/2018/01/bridgy-webmentions-and-publishing" rel="alternate" type="text/html" title="Bridgy, webmentions, and publishing." /><published>2018-01-21T00:00:00-05:00</published><updated>2018-01-21T01:41:16-05:00</updated><id>https://bitworking.org/news/2018/01/bridgy-webmentions-and-publishing</id><content type="html" xml:base="https://bitworking.org/news/2018/01/bridgy-webmentions-and-publishing">&lt;p&gt;&lt;a href=&quot;https://brid.gy/about#webmentions&quot;&gt;Brid.gy&lt;/a&gt; has a cool feature for
automatically posting blog posts to Twitter, which is interesting because it
uses Webmentions to kick off the whole process. I.e. just including the
link:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;https://brid.gy/publish/twitter&quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The webmention sent to brig.gy triggers it to look back at the post, parse it
and look for microformats indicating what content to publish, and then posts
it to Twitter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/bridgy.png&quot; alt=&quot;Using webmentions to trigger brid.gy to publish to Twitter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that this also works for Facebook and Flickr, and you obviously need to
authorize brid.gy to post to Twitter for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Brid.gy has a cool feature for automatically posting blog posts to Twitter, which is interesting because it uses Webmentions to kick off the whole process. I.e. just including the link:</summary></entry><entry><title type="html">Blogging drawings</title><link href="https://bitworking.org/news/2018/01/blogging-drawings" rel="alternate" type="text/html" title="Blogging drawings" /><published>2018-01-21T00:00:00-05:00</published><updated>2018-01-21T21:43:15-05:00</updated><id>https://bitworking.org/news/2018/01/blogging-drawings</id><content type="html" xml:base="https://bitworking.org/news/2018/01/blogging-drawings">&lt;p&gt;One of the goals with my new blogging system has been a flow for getting hand
drawn images onto the blog. I will admit this is purely driven by jealousy of
the awesome drawings on &lt;a href=&quot;https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/&quot;&gt;the morning
paper&lt;/a&gt;.
I didn’t know if I’d ever find a setup I would like until I got to borrow a
&lt;a href=&quot;https://store.google.com/us/product/google_pixelbook&quot;&gt;Google Pixelbook&lt;/a&gt;,
which is just an amazing machine and deserves a writeup on its own, but has
several key features, such as the ability to run Android apps and the ability
to fold over and turn into a tablet, along with one of the best digital pens
I’ve ever used. In the end my flow looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/blogging_pictures.png&quot; alt=&quot;Squid to Google Drive to Jekyll to GCE&quot; style=&quot;max-width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.steadfastinnovation.android.projectpapyrus&quot;&gt;Squid&lt;/a&gt;
is an Android app, one of the dozens I looked at, and the one that worked
the best for me, which means it is simple and has nice defaults.&lt;/p&gt;

&lt;p&gt;The “NUC” is my desktop machine which is where my blogging work is mostly
done, but that’s a machine I almost never physically touch, I’m almost always
accessing it over SSH, which is why this flow is probably a little more
complicated than you might have guessed.&lt;/p&gt;

&lt;p&gt;The “GCE” box in that picture is the Google Compute Enging instance that runs
&lt;a href=&quot;https://github.com/jcgregorio/userve&quot;&gt;userve&lt;/a&gt; and hosts this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">One of the goals with my new blogging system has been a flow for getting hand drawn images onto the blog. I will admit this is purely driven by jealousy of the awesome drawings on the morning paper. I didn’t know if I’d ever find a setup I would like until I got to borrow a Google Pixelbook, which is just an amazing machine and deserves a writeup on its own, but has several key features, such as the ability to run Android apps and the ability to fold over and turn into a tablet, along with one of the best digital pens I’ve ever used. In the end my flow looks like this:</summary></entry><entry><title type="html">Having fun with silo metadata</title><link href="https://bitworking.org/news/2018/01/having-fun-silo-metadata" rel="alternate" type="text/html" title="Having fun with silo metadata" /><published>2018-01-20T00:00:00-05:00</published><updated>2018-01-20T10:41:15-05:00</updated><id>https://bitworking.org/news/2018/01/having-fun-silo-metadata</id><content type="html" xml:base="https://bitworking.org/news/2018/01/having-fun-silo-metadata">&lt;p&gt;I just recently finished adding support for
&lt;a href=&quot;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary&quot;&gt;Twitter metadata&lt;/a&gt;
to the blog, mostly motivaged by &lt;a href=&quot;https://brid.gy/&quot;&gt;brid.gy&lt;/a&gt;’s ability to use
Webmentions to automatically post my blog entries to Twitter. As I worked on
the Twitter metadata I wondered if other silos had their own metadata they
supported. Indeed they do, and Kevin Marks brilliantly demonstrates how
ridiculous the situation is by creating a
&lt;a href=&quot;http://www.kevinmarks.com/partialsilos.html&quot;&gt;blog post that appears different in every silo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">I just recently finished adding support for Twitter metadata to the blog, mostly motivaged by brid.gy’s ability to use Webmentions to automatically post my blog entries to Twitter. As I worked on the Twitter metadata I wondered if other silos had their own metadata they supported. Indeed they do, and Kevin Marks brilliantly demonstrates how ridiculous the situation is by creating a blog post that appears different in every silo.</summary></entry><entry><title type="html">Space Gas Station</title><link href="https://bitworking.org/news/2018/01/space-gas-station" rel="alternate" type="text/html" title="Space Gas Station" /><published>2018-01-19T00:00:00-05:00</published><updated>2018-01-19T22:37:57-05:00</updated><id>https://bitworking.org/news/2018/01/space-gas-station</id><content type="html" xml:base="https://bitworking.org/news/2018/01/space-gas-station">&lt;p&gt;This SingularityHub post brings a good perspective
on the economics of asteroid mining:
&lt;a href=&quot;https://singularityhub.com/2018/01/19/want-faster-data-and-a-cleaner-planet-start-mining-asteroids/&quot;&gt;Want Faster Data and a Cleaner Planet? Start Mining Asteroids&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides, the idea of our gateway to becoming a space faring civilization
being bootstrapped from a space gas station is so much more
&lt;a href=&quot;https://www.jamessacorey.com/books/&quot;&gt;Expanse&lt;/a&gt; level scifi that I can’t help but like it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">This SingularityHub post brings a good perspective on the economics of asteroid mining: Want Faster Data and a Cleaner Planet? Start Mining Asteroids</summary></entry></feed>