<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://bitworking.org/news/feed/index.atom" rel="self" type="application/atom+xml" /><link href="https://bitworking.org/" rel="alternate" type="text/html" /><updated>2018-07-21T23:16:06-04:00</updated><id>https://bitworking.org/</id><title type="html">BitWorking</title><subtitle>Joe Gregorio - REST, Web, Python, Go, APIs, Dad, Husband, Maker, or any linear combination of such. Googler.
</subtitle><entry><title type="html">sociopaths</title><link href="https://bitworking.org/news/2018/07/sociopaths" rel="alternate" type="text/html" title="sociopaths" /><published>2018-07-21T00:00:00-04:00</published><updated>2018-07-21T23:10:24-04:00</updated><id>https://bitworking.org/news/2018/07/sociopaths</id><content type="html" xml:base="https://bitworking.org/news/2018/07/sociopaths">&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1958/&quot;&gt;
&lt;img src=&quot;https://imgs.xkcd.com/comics/self_driving_issues.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, XKCD nails it, our society is built under the basic premise that
people aren’t sociopaths. This is the root of Facebook and Twitter’s issues,
which is that they have built platforms that are being exploited by
sociopaths, but they seem unwilling to act, always concerned about free
speech. It is a particularly Silicon Valley conceit to not understand the
difference.&lt;/p&gt;

&lt;p&gt;While Zuckerberg is busy enabling &lt;a href=&quot;https://www.recode.net/platform/amp/2018/7/18/17575156/mark-zuckerberg-interview-facebook-recode-kara-swisher&quot;&gt;holocaust deniers:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
I find that deeply offensive. But at the end of the day, I don’t believe that
our platform should take that down because I think there are things that
different people get wrong.
&lt;/blockquote&gt;

&lt;p&gt;@jack is hoping algorithms will make all of his problems go away.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;”The
downside is that everyone is treated as equally expert on various
topics.”&lt;br /&gt;&lt;br /&gt;One of the biggest areas I believe we can help. Helping to
determine credible voices per topic in real-time is extremely challenging, but
believe it’s possible. Mix of algos and network.&lt;/p&gt;&amp;mdash; jack (@jack) &lt;a href=&quot;https://twitter.com/jack/status/1020767829878947840?ref_src=twsrc%5Etfw&quot;&gt;July
21, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html"></summary></entry><entry><title type="html">machine learning for continuous integration</title><link href="https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-ocson" rel="alternate" type="text/html" title="machine learning for continuous integration" /><published>2018-07-21T00:00:00-04:00</published><updated>2018-07-21T23:14:18-04:00</updated><id>https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-#ocson</id><content type="html" xml:base="https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-ocson">&lt;p&gt;Here are the slides for my OSCON presentation &lt;a href=&quot;http://bit.ly/ml-4-ci&quot;&gt;Machine Learning for
Continuous Integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual my slides are pretty worthless on their own, except for the links.
I will post the video here as soon as it is available.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Here are the slides for my OSCON presentation Machine Learning for Continuous Integration.</summary></entry><entry><title type="html">k-means clustering</title><link href="https://bitworking.org/news/2018/07/k-means-clustering" rel="alternate" type="text/html" title="k-means clustering" /><published>2018-07-14T00:00:00-04:00</published><updated>2018-07-14T14:15:49-04:00</updated><id>https://bitworking.org/news/2018/07/k-means-clustering</id><content type="html" xml:base="https://bitworking.org/news/2018/07/k-means-clustering">&lt;p&gt;
  A simple demo of &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt; k-means clustering&lt;/a&gt;.
  The little squares are the observations and the cirles are the centroids.
  Press the 'Step:' button to step through the algorithm.
&lt;/p&gt;

&lt;canvas id=cluster width=500 height=500&gt;&lt;/canvas&gt;
&lt;div&gt;
  &lt;button id=restart&gt;Restart&lt;/button&gt;
  &lt;button id=step&gt;&lt;/button&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;

const K = 3;
const WIDTH=500;
const HEIGHT=500;
const RADIUS = 0.1;
const STEP1 = &quot;Step 1: Assign observations to clusters.&quot;
const STEP2 = &quot;Step 2: Update centroids.&quot;
const COLORS = ['darkgreen', 'blue', 'darkorange', 'red', 'purple'];

let ctx = document.getElementById('cluster').getContext('2d');
let stepEle = document.getElementById('step');

function clear() {
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, WIDTH, HEIGHT);
}

function render(points, circle) {
  points.forEach(pt =&gt; {
    let x = Math.floor(pt.x*WIDTH);
    let y = Math.floor(pt.y*HEIGHT);
    ctx.fillStyle = COLORS[pt.c];
    ctx.strokeStyle = COLORS[pt.c];
    ctx.lineWidth = 2;
    if (!circle) {
      ctx.fillRect(x-4, y-4, 9, 9);
    } else {
      ctx.beginPath();
      ctx.arc(x, y, 12, 0, Math.PI*2, true);
      ctx.stroke();
    }
  });
}

// Create a set of observations that look clumpy.
function distribute() {
  let clumps = [];
  for (var i = 0; i &lt; 3; i++) {
    clumps.push({
      x: Math.random(),
      y: Math.random(),
    });
  }

  let points = [];

  for (var i = 0; i &lt; 800; i++) {
    let x = Math.random();
    let y = Math.random();
    if (Math.random() &gt; 0.05) {
      // Reject if not close enough to an x.
      let hit = clumps.reduce((accumulator, current) =&gt; {
        return accumulator || (
          Math.abs(current.x - x) &lt; RADIUS
          &amp;&amp; Math.abs(current.y - y) &lt; RADIUS);
      }, false);
      if (!hit) {
        continue
      }
    }
    points.push({
      x: x,
      y: y,
      c: 0,
    });
  }
  return points;
}

// Return the index of the closest centroid to the given point.
function closest(centroids, pt) {
  let c = 0;
  let dist = 100;
  centroids.forEach((centroid, i) =&gt; {
    let cdist = (centroid.x - pt.x)** 2 + (centroid.y - pt.y) ** 2;
    if (cdist &lt; dist) {
      c = i;
      dist = cdist;
    }
  });
  return c
}

// Step 1 of the clustering algorithm.
function cluster1(centroids, points) {
  points.forEach(pt =&gt; {
    pt.c = closest(centroids, pt)
  });
  return centroids
}

// Step 2 of the clustering algorithm.
function cluster2(centroids, points) {
  // Recalc centroids.
  let new_centroids = [];
  let counts = [];
  for (var i = 0; i &lt; centroids.length; i++) {
  new Array(centroids.length).fill({x:0, y:0});
    new_centroids.push({
      x: 0,
      y: 0,
      c: i,
    });
    counts.push(0);
  }
  points.forEach(pt =&gt; {
    counts[pt.c] += 1;
    new_centroids[pt.c].x += pt.x;
    new_centroids[pt.c].y += pt.y;
  });
  let ret = [];
  for (var i = 0; i &lt; new_centroids.length; i++) {
    if (counts[i] &gt; 0) {
      let pt = new_centroids[i];
      ret.push({
        x: pt.x / counts[i],
        y: pt.y / counts[i],
        c: pt.c,
      });
    }
  }
  return ret
}

let currentStep = 0;
let points = [];
let centroids = [];

function restart() {
  currentStep = 0;
  points = distribute();
  centroids = JSON.parse(JSON.stringify(points.slice(0, K)));
  centroids.forEach((pt, i) =&gt; {
    pt.c = i;
  });
  clear();
  render(points);
  render(centroids, true);
  stepEle.innerText = STEP1;
}

function step() {
  if (currentStep % 2 == 0) {
    centroids = cluster1(centroids, points);
    stepEle.innerText = STEP2;
  } else {
    centroids = cluster2(centroids, points);
    stepEle.innerText = STEP1;
  }
  currentStep+=1;
  clear();
  render(points);
  render(centroids, true);
}

document.getElementById('restart').addEventListener('click', restart);
document.getElementById('step').addEventListener('click', step);

restart();
&lt;/script&gt;


&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">A simple demo of k-means clustering. The little squares are the observations and the cirles are the centroids. Press the 'Step:' button to step through the algorithm.</summary></entry><entry><title type="html">elements-sk material design icons</title><link href="https://bitworking.org/news/2018/06/elements-sk-icons" rel="alternate" type="text/html" title="elements-sk material design icons" /><published>2018-06-20T00:00:00-04:00</published><updated>2018-06-20T09:38:49-04:00</updated><id>https://bitworking.org/news/2018/06/elements-sk-icons</id><content type="html" xml:base="https://bitworking.org/news/2018/06/elements-sk-icons">&lt;p&gt;The latest release of &lt;a href=&quot;https://www.npmjs.com/package/elements-sk&quot;&gt;elements-sk&lt;/a&gt;
has added elements for all the
&lt;a href=&quot;https://github.com/google/material-design-icons&quot;&gt;Material Design Icons&lt;/a&gt;.
You can see the full set of icons in action on the
&lt;a href=&quot;https://jsdoc.skia.org/elements-sk/icon-sk.html&quot;&gt;elements-sk documentation site&lt;/a&gt;.
Each one is its own module, so you only pay for what you use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">The latest release of elements-sk has added elements for all the Material Design Icons. You can see the full set of icons in action on the elements-sk documentation site. Each one is its own module, so you only pay for what you use.</summary></entry><entry><title type="html">Pulito and VanillaJS updated to webpack 4</title><link href="https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4" rel="alternate" type="text/html" title="Pulito and VanillaJS updated to webpack 4" /><published>2018-05-21T00:00:00-04:00</published><updated>2018-05-21T23:16:34-04:00</updated><id>https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4</id><content type="html" xml:base="https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4">&lt;p&gt;Both &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;Pulito&lt;/a&gt; and &lt;a href=&quot;https://github.com/jcgregorio/vanillajs&quot;&gt;VanillaJS&lt;/a&gt; have updated to webpack 4.&lt;/p&gt;

&lt;p&gt;Additionally both have moved from yarn to npm. While npm still isn’t as fast
as yarn, the support for &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; files and increased attention to
security and speed are worth the tradeoff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Both Pulito and VanillaJS have updated to webpack 4.</summary></entry><entry><title type="html">Silicon Valley Libertarianism - Remembered</title><link href="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered" rel="alternate" type="text/html" title="Silicon Valley Libertarianism - Remembered" /><published>2018-03-26T00:00:00-04:00</published><updated>2018-03-26T19:13:22-04:00</updated><id>https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered</id><content type="html" xml:base="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered">&lt;p&gt;Remember the last time silicon valley was growing like crazy without any supervision?
&lt;a href=&quot;https://www.nytimes.com/2018/03/26/lens/the-superfund-sites-of-silicon-valley.html&quot;&gt;We’re still dealing with that mess&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Remember the last time silicon valley was growing like crazy without any supervision? We’re still dealing with that mess.</summary></entry><entry><title type="html">Stop using Medium</title><link href="https://bitworking.org/news/2018/03/centralized-publishing" rel="alternate" type="text/html" title="Stop using Medium" /><published>2018-03-25T00:00:00-04:00</published><updated>2018-03-25T16:53:23-04:00</updated><id>https://bitworking.org/news/2018/03/centralized-publishing</id><content type="html" xml:base="https://bitworking.org/news/2018/03/centralized-publishing">&lt;p&gt;It’s 2018 and it’s still a &lt;a href=&quot;https://mastodon.xyz/@Liberapay/99744324870271197&quot;&gt;bad
idea to trust centralized publishing platforms&lt;/a&gt;. Film at 11.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">It’s 2018 and it’s still a bad idea to trust centralized publishing platforms. Film at 11.</summary></entry><entry><title type="html">Silicon Valley Libertarianism - An Obituary</title><link href="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary" rel="alternate" type="text/html" title="Silicon Valley Libertarianism - An Obituary" /><published>2018-03-20T00:00:00-04:00</published><updated>2018-03-20T08:48:18-04:00</updated><id>https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary</id><content type="html" xml:base="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary">&lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2018/03/18/us/cambridge-analytica-facebook-privacy-data.html&quot;&gt;Facebook’s Role in Data Misuse Sets Off Storms on Two Continents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On March 18th, 2018 Libertarianism, aka the #Just-Trust-In-The-Giant-Corporations movement, died
of a self-inflicted gun wound to the head. In lieu of flowers, please send
regulators to look after your citizens privacy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Facebook’s Role in Data Misuse Sets Off Storms on Two Continents</summary></entry><entry><title type="html">VanillaJS apps have been ported to a la carte web development</title><link href="https://bitworking.org/news/2018/03/vanillajs-apps-have-been-ported-to-a-la-carte-web-development" rel="alternate" type="text/html" title="VanillaJS apps have been ported to a la carte web development" /><published>2018-03-18T00:00:00-04:00</published><updated>2018-03-18T10:18:34-04:00</updated><id>https://bitworking.org/news/2018/03/vanillajs-apps-have-been-ported-to-a-la-carte-web-development</id><content type="html" xml:base="https://bitworking.org/news/2018/03/vanillajs-apps-have-been-ported-to-a-la-carte-web-development">&lt;p&gt;My &lt;a href=&quot;https://github.com/jcgregorio/vanillajs&quot;&gt;VanillaJS&lt;/a&gt; project, where I
re-implement popular framework sample apps in vanilla JavaScript, has now been
ported over to &lt;a href=&quot;https://bitworking.org/news/2018/03/a-la-carte-web-development&quot;&gt;‘a la carte’&lt;/a&gt; web development. In this case that means they
all use &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt; for their tooling and
directory structure, and individual framework ports bring in templating
libaries as needed. For example, the &lt;a href=&quot;https://github.com/jcgregorio/vanillajs/tree/master/react&quot;&gt;React sample rewrite&lt;/a&gt;
uses &lt;a href=&quot;https://github.com/Polymer/lit-html&quot;&gt;lit-html&lt;/a&gt; for templating, and the
&lt;a href=&quot;https://github.com/jcgregorio/vanillajs/tree/master/angular-todo&quot;&gt;Angular sample rewrite&lt;/a&gt;
uses &lt;a href=&quot;https://github.com/WebReflection/hyperHTML&quot;&gt;hyperHTML&lt;/a&gt; for templating.&lt;/p&gt;

&lt;p&gt;This is a perfect example of the power of &lt;a href=&quot;https://bitworking.org/news/2018/03/a-la-carte-web-development&quot;&gt;a la carte&lt;/a&gt;
web development, where you get to pick the components you want and only have
to ‘pay’ for what you use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">My VanillaJS project, where I re-implement popular framework sample apps in vanilla JavaScript, has now been ported over to ‘a la carte’ web development. In this case that means they all use pulito for their tooling and directory structure, and individual framework ports bring in templating libaries as needed. For example, the React sample rewrite uses lit-html for templating, and the Angular sample rewrite uses hyperHTML for templating.</summary></entry><entry><title type="html">A la carte Web Development</title><link href="https://bitworking.org/news/2018/03/a-la-carte-web-development" rel="alternate" type="text/html" title="A la carte Web Development" /><published>2018-03-13T00:00:00-04:00</published><updated>2018-03-13T12:25:34-04:00</updated><id>https://bitworking.org/news/2018/03/a-la-carte-web-development</id><content type="html" xml:base="https://bitworking.org/news/2018/03/a-la-carte-web-development">&lt;p&gt;&lt;a href=&quot;https://bitworking.org/news/2014/05/zero_framework_manifesto&quot;&gt;Stop using JS Frameworks&lt;/a&gt; is something I’ve been advocating for years now, and a
legitimate question I get is what do you replace it with?&lt;/p&gt;

&lt;p&gt;The answer is “a la carte” web development.&lt;/p&gt;

&lt;p&gt;Instead of picking a monolithic solution like a web framework, you just pick
the pieces you need. I don’t mean any old random pieces, below I am going to
outline specific criteria that need to be met for some components to
participate in a la carte web development.&lt;/p&gt;

&lt;p&gt;To get a better feel for this let’s start by looking at what a web framework
“normally” provides. The “normally” is in quotes because not all frameworks
provide all of these features, but most frameworks provide a majority of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Framework
    &lt;ul&gt;
      &lt;li&gt;Model&lt;/li&gt;
      &lt;li&gt;Tooling and structure&lt;/li&gt;
      &lt;li&gt;Elements&lt;/li&gt;
      &lt;li&gt;Templating&lt;/li&gt;
      &lt;li&gt;State Management&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All good things, but why do they have to be bundled together like a TV dinner?&lt;/p&gt;

&lt;h2 id=&quot;a-la-carte&quot;&gt;A la carte&lt;/h2&gt;
&lt;p&gt;“A la carte” web development does away with the framework, says just
use the browser for the model, and the rest of the pieces you pick and choose
the ones that work for you. In a la carte development each bullet point is a
separate piece of software:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A la carte&lt;/em&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Tooling and structure&lt;/dt&gt;
  &lt;dd&gt;Defines a directory structure for how a project is put together and provides tooling such as
JS transpiling, CSS prefixing, etc. for projects that conform that directory structure.
Expects ES6 modules with the extension that webpack, rollup, and similar tools presume, i.e.
allow importing other types of files, see &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;webpack loaders&lt;/a&gt;.&lt;/dd&gt;
  &lt;dt&gt;Elements&lt;/dt&gt;
  &lt;dd&gt;A library of v1 custom elements in ES6 modules. Note that these elements must be provided in ES6
modules with the extension that webpack, rollup, and similar tools presume, i.e.
allow importing other types of files, see &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;webpack loaders&lt;/a&gt;.
The elements much also be &lt;a href=&quot;https://bitworking.org/news/2018/02/custom-elements-neat&quot;&gt;“neat”&lt;/a&gt;, i.e.
just HTML, CSS, and JS. No SCSS or templating libraries.&lt;/dd&gt;
  &lt;dt&gt;Templating&lt;/dt&gt;
  &lt;dd&gt;Any templating library you like, as long as it works with v1 custom elements.&lt;/dd&gt;
  &lt;dt&gt;State Management&lt;/dt&gt;
  &lt;dd&gt;Any state management library you like, if you even need one.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;The assumptions needed for all of this to work together are fairly minimal:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ES6 modules and the extension that webpack, rollup, and similar tools presume, i.e.
    allow importing other types of files, see &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;webpack loaders&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The base elements are “Neat”, i.e. they are JS, CSS, and HTML only. No additional
    libraries are used, such as a templating library. Note that sets of ‘neat’ elements also conform
    to #1, i.e. they are provided as webpack/rollup compatible ES6 modules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously there are other guidelines that could be added as advisory, for example
&lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/best-practices&quot;&gt;Google Developers Guide - Custom Elements Best Practices&lt;/a&gt;,
should be followed when creating custom elements sets,
except for the admonition to use Shadow DOM, &lt;a href=&quot;https://bitworking.org/news/2018/02/shadow-dom-and-css&quot;&gt;which I would avoid for now, unless you really need it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Such code will natively run in browsers that support custom elements v1. To get
it to run in a wider range of browsers you will need to add polyfills and,
depending on the target browser version, compile the JS back to an older
version of ES, and run a prefixer on the CSS. The wider the target set of
browsers and the older the versions you are targeting the more processing you
will need to do, but the original code doesn’t need to change, and all those
extra processing steps are only incurred by projects that need it.&lt;/p&gt;

&lt;h2 id=&quot;concrete&quot;&gt;Concrete&lt;/h2&gt;

&lt;p&gt;To move this proposal beyond just theoretical I’ve been developing and
porting applications over to this model for the past few months.&lt;/p&gt;

&lt;p&gt;We just published &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt;, a stake in the ground for what a “tooling and
structure” component looks like. You will note that it isn’t very complex, nothing more than an opinionated
webpack config file.&lt;/p&gt;

&lt;p&gt;Similarly we’ve published our set of “neat” custom elements
&lt;a href=&quot;https://www.npmjs.com/package/skia-elements&quot;&gt;skia-elements&lt;/a&gt;. A small set of
elements that is still very much a work in progress. Documentation and live
demos for skia-elements can be found on
&lt;a href=&quot;https://jsdoc.skia.org&quot;&gt;jsdoc.skia.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our current stack looks like:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Tooling and structure&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Elements&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;https://www.npmjs.com/package/skia-elements&quot;&gt;skia-elements&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Templating&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;https://www.npmjs.com/package/lit-html&quot;&gt;lit-html&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;We have used Redux in an experimental app that never shipped and haven’t needed
any state management libraries in the other applications we’ve ported over, so
our ‘state management’ library is still an open question.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;What is like to use this stack? Let’s start from an empty directory
and start building a web app:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn init
$ yarn add pulito
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We are starting from scratch so use the project skeleton that &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt; provides:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ unzip node_modules/pulito/skeleton.zip
$ yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can now run the dev server and see our running skeleton application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s add in &lt;a href=&quot;https://www.npmjs.com/package/skia-elements&quot;&gt;skia-elements&lt;/a&gt; and add a set of tabs to the UI.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add skia-elements
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now add imports to &lt;code class=&quot;highlighter-rouge&quot;&gt;pages/index.js&lt;/code&gt; to bring in the elements we need:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'skia-elements/tabs-sk'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'skia-elements/tabs-panel-sk'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../modules/example-element'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then use those elements on &lt;code class=&quot;highlighter-rouge&quot;&gt;pages/index.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tabs-sk&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Some Tab&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Another Tab&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tabs-sk&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tabs-panel-sk&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; This is Some Tab contents.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      This is the contents for Another Tab.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tabs-panel-sk&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;example-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/example-element&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now restart the dev server and see the updated page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;why-is-this-better&quot;&gt;Why is this better?&lt;/h2&gt;
&lt;p&gt;Web frameworks usually make all these choices for you, you don’t
get to choose, even if you don’t need the functionality. For example, state
managament might not be needed, why are you ‘paying’ for it, where ‘paying’
means learning about that aspect of the web framework, and possibly even
having to serve the code that implements state managment even if you never
use it. With a la carte development you only include what you use.&lt;/p&gt;

&lt;p&gt;An extra benefit comes when it is time to upgrade. How much time
have you lost with massive upgrades from v1 to v2 of a web framework?
With ‘a la carte’ developement the upgrades don’t have to be monolithic.
I.e. if you’ve chosen a templating library and want to upgrade to
the next version you only need to update your templates, and not have to
touch every aspect of your application.&lt;/p&gt;

&lt;p&gt;Finally, ‘a la carte’ web development provides no “model” but the browser.  Of
all the things that frameworks provide, “model” is the most problematic.
Instead of just using the browser as it is, many frameworks have their own
model of the browser, how DOM works, how events work, etc. &lt;a href=&quot;https://bitworking.org/news/2014/05/zero_framework_manifesto&quot;&gt;I have gone into depth on the issues previously&lt;/a&gt;, but
they can be summarized as lost effort (learning something that doesn’t
translate) and a barrier to reuse. What should replace it? Just use the
browser, it already has a &lt;a href=&quot;https://bitworking.org/news/2015/03/Six_Places&quot;&gt;model for how to combine elements together&lt;/a&gt;, and now with custom
elements v1 gives you the ability to create your own elements, you have all you
need.&lt;/p&gt;

&lt;h2 id=&quot;let-a-thousand-flowers-bloom&quot;&gt;Let a thousand flowers bloom&lt;/h2&gt;

&lt;p&gt;One of the most important aspects of ‘a la carte’ web developement is that it
decouples all the components, allowing them to evolve and adapt to user needs
on a much faster cycle than the normal web framework release cycle allows.
Just because we’ve published &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/skia-elements&quot;&gt;skia-elements&lt;/a&gt; doesn’t mean we believe
they are the best solutions. I’d love to have a slew of options to choose from
for tooling, base element sets, templating, and state management.  I’d like to
see Rollup based tools that take the place of &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;pulito&lt;/a&gt;, and a whole swarm of
“neat” custom elements sets with varying levels of customizability and breadth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Stop using JS Frameworks is something I’ve been advocating for years now, and a legitimate question I get is what do you replace it with?</summary></entry></feed>