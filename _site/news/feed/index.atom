<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://bitworking.org/news/feed/index.atom" rel="self" type="application/atom+xml" /><link href="https://bitworking.org/" rel="alternate" type="text/html" /><updated>2018-10-13T11:21:27-04:00</updated><id>https://bitworking.org/</id><title type="html">BitWorking</title><subtitle>Joe Gregorio - REST, Web, Python, Go, APIs, Dad, Husband, Maker, or any linear combination of such. Googler.
</subtitle><entry><title type="html">Firebase Hosting</title><link href="https://bitworking.org/news/2018/10/firebase-hosting" rel="alternate" type="text/html" title="Firebase Hosting" /><published>2018-10-13T00:00:00-04:00</published><updated>2018-10-13T11:21:20-04:00</updated><id>https://bitworking.org/news/2018/10/firebase-hosting</id><content type="html" xml:base="https://bitworking.org/news/2018/10/firebase-hosting">&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/hosting/&quot;&gt;Firebase Hosting&lt;/a&gt; is amazing,
so fast and easy to setup and they even take care of the SSL cert for you.
I work for Google and didn’t even know we had this as a product,
so just posting it here in case anyone else missed it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Firebase Hosting is amazing, so fast and easy to setup and they even take care of the SSL cert for you. I work for Google and didn’t even know we had this as a product, so just posting it here in case anyone else missed it.</summary></entry><entry><title type="html">The experience driven source of the elements-sk set of custom elements.</title><link href="https://bitworking.org/news/2018/07/the-experience-driven-source-of-elements-sk" rel="alternate" type="text/html" title="The experience driven source of the elements-sk set of custom elements." /><published>2018-07-22T00:00:00-04:00</published><updated>2018-07-22T20:38:29-04:00</updated><id>https://bitworking.org/news/2018/07/the-experience-driven-source-of-elements-sk</id><content type="html" xml:base="https://bitworking.org/news/2018/07/the-experience-driven-source-of-elements-sk">&lt;p&gt;Last August, as my team was pondering moving away from
&lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt; and creating our own set of
&lt;a href=&quot;https://bitworking.org/news/2018/02/custom-elements-neat&quot;&gt;neat&lt;/a&gt; vanilla js
&lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/customelements&quot;&gt;custom
elements&lt;/a&gt;,
I decided to take a data driven stab at deciding is this was a viable plan. My
team has been building web applications for over four years using Polymer  and
that corpus of code could be used to guide the decision. The first thing I did
was scan each project and record every Polymer or Iron element used in every
project. If I’m going to replace Polymer at least I should know how many
elements I’m signing up to rewrite. That initial list was surpising in a
couple of ways, the first was how short the list was:&lt;/p&gt;

&lt;style&gt;
table{
  border-collapse: collapse;
  border-spacing: 0;
  border:2px solid gray;
  margin: 1em;
}

th, td {
  padding: 0.2em;
  border:2px solid gray;
}
&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Polymer/Iron elements Used&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-ajax&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-autogrow-textarea&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-collapse&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-flex-layout&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-icon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-pages&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-resizable-behavior&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-scroll-threshold&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-selector&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-autocomplete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-button&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-checkbox&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dialog&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dialog-scrollable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-drawer-panel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dropdown-menu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-fab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-header-panel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-icon-button&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-input&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-item&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-listbox&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-menu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-menu-button&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-radio-button&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-radio-group&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-spinner&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-tabs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toggle-button&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toolbar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-tooltip&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After four years of development I expected the list to be much larger.&lt;/p&gt;

&lt;p&gt;The second surpise was how many of the elements in that list really shouldn’t
be elements at all. For example, some could be replaced with native elements
with some better styling, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;paper-button&lt;/code&gt;.
Alternatively some could be replaced with CSS or a non-element solution, such
as &lt;code class=&quot;highlighter-rouge&quot;&gt;iron-ajax&lt;/code&gt;, which shouldn’t be an element at all and should be replaced
with the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch()&lt;/code&gt; function. After doing that analysis the number of elements
actually needed to be re-implemented from Polymer fell to a very small number.
In the table below the ‘Native’ column is for places where we could use native
elements and just have a good default styling for them. The ‘Use Instead’
column is what we could use in place of a custom element. Here you will notice
a large number of elements that can be replaced with CSS. Finally the last
column, ‘Replacement Element’, is the name of the element we made to replace
the Polymer element:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Polymer&lt;/th&gt;
      &lt;th&gt;Native&lt;/th&gt;
      &lt;th&gt;Use Instead&lt;/th&gt;
      &lt;th&gt;Replacement Element&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-ajax&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use fetch()&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-collapse&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;collapse-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-flex-layout&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS Flexbox/Grid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-icon&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;*-icon-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-pages&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;tabs-panel-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-resizable-behavior&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS Flexbox/Grid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-scroll-threshold&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Shouldn’t be an element&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iron-selector&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;select-sk/multi-select-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-autocomplete&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;No replacement yet.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-button&lt;/td&gt;
      &lt;td&gt;button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-checkbox&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;checkbox-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dialog&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;dialog-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dialog-scrollable&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-drawer-panel&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS Flexbox/Grid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-dropdown-menu&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;nav-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-fab&lt;/td&gt;
      &lt;td&gt;button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-header-panel&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS Flexbox/Grid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-icon-button&lt;/td&gt;
      &lt;td&gt;button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;icon-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-input&lt;/td&gt;
      &lt;td&gt;input&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-item&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;nav-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-listbox&lt;/td&gt;
      &lt;td&gt;option/select&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-menu&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;nav-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-menu-button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;nav-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-radio-button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;radio-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-radio-group&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-spinner&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;spinner-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-tabs&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;tabs-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toast&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;toast-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toggle-button&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;checkbox-sk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-toolbar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use CSS Flexbox/Grid&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paper-tooltip&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Use title attribute&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That set of minimal custom elements has now been launced as
&lt;a href=&quot;https://www.npmjs.com/package/elements-sk&quot;&gt;elements-sk&lt;/a&gt;. While the number of
elements is small, it is driven by four years of development using custom
elements, and just might be a good set of elements for your development too.
If anyone has done a similar analysis I’d love to hear about it, please let me
know in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Last August, as my team was pondering moving away from Polymer and creating our own set of neat vanilla js custom elements, I decided to take a data driven stab at deciding is this was a viable plan. My team has been building web applications for over four years using Polymer and that corpus of code could be used to guide the decision. The first thing I did was scan each project and record every Polymer or Iron element used in every project. If I’m going to replace Polymer at least I should know how many elements I’m signing up to rewrite. That initial list was surpising in a couple of ways, the first was how short the list was:</summary></entry><entry><title type="html">sociopaths</title><link href="https://bitworking.org/news/2018/07/sociopaths" rel="alternate" type="text/html" title="sociopaths" /><published>2018-07-21T00:00:00-04:00</published><updated>2018-07-22T19:34:40-04:00</updated><id>https://bitworking.org/news/2018/07/sociopaths</id><content type="html" xml:base="https://bitworking.org/news/2018/07/sociopaths">&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1958/&quot;&gt;
&lt;img src=&quot;https://imgs.xkcd.com/comics/self_driving_issues.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, XKCD nails it, our society is built under the basic premise that
people aren’t sociopaths. This is the root of Facebook and Twitter’s issues,
which is that they have built platforms that are being exploited by
sociopaths, but they seem unwilling to act, always concerned about free
speech. It is a particularly Silicon Valley conceit to not understand the
difference.&lt;/p&gt;

&lt;p&gt;While Zuckerberg is busy enabling &lt;a href=&quot;https://www.recode.net/platform/amp/2018/7/18/17575156/mark-zuckerberg-interview-facebook-recode-kara-swisher&quot;&gt;holocaust deniers:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
I find that deeply offensive. But at the end of the day, I don’t believe that
our platform should take that down because I think there are things that
different people get wrong.
&lt;/blockquote&gt;

&lt;p&gt;@jack is hoping algorithms will make all of his problems go away.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;”The
downside is that everyone is treated as equally expert on various
topics.”&lt;br /&gt;&lt;br /&gt;One of the biggest areas I believe we can help. Helping to
determine credible voices per topic in real-time is extremely challenging, but
believe it’s possible. Mix of algos and network.&lt;/p&gt;&amp;mdash; jack (@jack) &lt;a href=&quot;https://twitter.com/jack/status/1020767829878947840?ref_src=twsrc%5Etfw&quot;&gt;July
21, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt; Oh look, actual historians making the case for blocking
holocaust deniers: &lt;a href=&quot;https://slate.com/technology/2018/07/the-askhistorians-subreddit-banned-holocaust-deniers-and-facebook-should-too.html&quot;&gt;How One of the Internet’s Biggest History Forums Deals With Holocaust Deniers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html"></summary></entry><entry><title type="html">machine learning for continuous integration</title><link href="https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-ocson" rel="alternate" type="text/html" title="machine learning for continuous integration" /><published>2018-07-21T00:00:00-04:00</published><updated>2018-09-24T12:52:40-04:00</updated><id>https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-#ocson</id><content type="html" xml:base="https://bitworking.org/news/2018/07/machine-learning-for-continuous-integration-ocson">&lt;p&gt;Here are the slides for my OSCON presentation &lt;a href=&quot;http://bit.ly/ml-4-ci&quot;&gt;Machine Learning for
Continuous Integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual my slides are pretty worthless on their own, except for the links.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (24-Sep-2018)&lt;/em&gt; Recording is now available:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/yWl-AMMN-ug?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Here are the slides for my OSCON presentation Machine Learning for Continuous Integration.</summary></entry><entry><title type="html">k-means clustering</title><link href="https://bitworking.org/news/2018/07/k-means-clustering" rel="alternate" type="text/html" title="k-means clustering" /><published>2018-07-14T00:00:00-04:00</published><updated>2018-07-14T14:15:49-04:00</updated><id>https://bitworking.org/news/2018/07/k-means-clustering</id><content type="html" xml:base="https://bitworking.org/news/2018/07/k-means-clustering">&lt;p&gt;
  A simple demo of &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt; k-means clustering&lt;/a&gt;.
  The little squares are the observations and the cirles are the centroids.
  Press the 'Step:' button to step through the algorithm.
&lt;/p&gt;

&lt;canvas id=cluster width=500 height=500&gt;&lt;/canvas&gt;
&lt;div&gt;
  &lt;button id=restart&gt;Restart&lt;/button&gt;
  &lt;button id=step&gt;&lt;/button&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;

const K = 3;
const WIDTH=500;
const HEIGHT=500;
const RADIUS = 0.1;
const STEP1 = &quot;Step 1: Assign observations to clusters.&quot;
const STEP2 = &quot;Step 2: Update centroids.&quot;
const COLORS = ['darkgreen', 'blue', 'darkorange', 'red', 'purple'];

let ctx = document.getElementById('cluster').getContext('2d');
let stepEle = document.getElementById('step');

function clear() {
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, WIDTH, HEIGHT);
}

function render(points, circle) {
  points.forEach(pt =&gt; {
    let x = Math.floor(pt.x*WIDTH);
    let y = Math.floor(pt.y*HEIGHT);
    ctx.fillStyle = COLORS[pt.c];
    ctx.strokeStyle = COLORS[pt.c];
    ctx.lineWidth = 2;
    if (!circle) {
      ctx.fillRect(x-4, y-4, 9, 9);
    } else {
      ctx.beginPath();
      ctx.arc(x, y, 12, 0, Math.PI*2, true);
      ctx.stroke();
    }
  });
}

// Create a set of observations that look clumpy.
function distribute() {
  let clumps = [];
  for (var i = 0; i &lt; 3; i++) {
    clumps.push({
      x: Math.random(),
      y: Math.random(),
    });
  }

  let points = [];

  for (var i = 0; i &lt; 800; i++) {
    let x = Math.random();
    let y = Math.random();
    if (Math.random() &gt; 0.05) {
      // Reject if not close enough to an x.
      let hit = clumps.reduce((accumulator, current) =&gt; {
        return accumulator || (
          Math.abs(current.x - x) &lt; RADIUS
          &amp;&amp; Math.abs(current.y - y) &lt; RADIUS);
      }, false);
      if (!hit) {
        continue
      }
    }
    points.push({
      x: x,
      y: y,
      c: 0,
    });
  }
  return points;
}

// Return the index of the closest centroid to the given point.
function closest(centroids, pt) {
  let c = 0;
  let dist = 100;
  centroids.forEach((centroid, i) =&gt; {
    let cdist = (centroid.x - pt.x)** 2 + (centroid.y - pt.y) ** 2;
    if (cdist &lt; dist) {
      c = i;
      dist = cdist;
    }
  });
  return c
}

// Step 1 of the clustering algorithm.
function cluster1(centroids, points) {
  points.forEach(pt =&gt; {
    pt.c = closest(centroids, pt)
  });
  return centroids
}

// Step 2 of the clustering algorithm.
function cluster2(centroids, points) {
  // Recalc centroids.
  let new_centroids = [];
  let counts = [];
  for (var i = 0; i &lt; centroids.length; i++) {
  new Array(centroids.length).fill({x:0, y:0});
    new_centroids.push({
      x: 0,
      y: 0,
      c: i,
    });
    counts.push(0);
  }
  points.forEach(pt =&gt; {
    counts[pt.c] += 1;
    new_centroids[pt.c].x += pt.x;
    new_centroids[pt.c].y += pt.y;
  });
  let ret = [];
  for (var i = 0; i &lt; new_centroids.length; i++) {
    if (counts[i] &gt; 0) {
      let pt = new_centroids[i];
      ret.push({
        x: pt.x / counts[i],
        y: pt.y / counts[i],
        c: pt.c,
      });
    }
  }
  return ret
}

let currentStep = 0;
let points = [];
let centroids = [];

function restart() {
  currentStep = 0;
  points = distribute();
  centroids = JSON.parse(JSON.stringify(points.slice(0, K)));
  centroids.forEach((pt, i) =&gt; {
    pt.c = i;
  });
  clear();
  render(points);
  render(centroids, true);
  stepEle.innerText = STEP1;
}

function step() {
  if (currentStep % 2 == 0) {
    centroids = cluster1(centroids, points);
    stepEle.innerText = STEP2;
  } else {
    centroids = cluster2(centroids, points);
    stepEle.innerText = STEP1;
  }
  currentStep+=1;
  clear();
  render(points);
  render(centroids, true);
}

document.getElementById('restart').addEventListener('click', restart);
document.getElementById('step').addEventListener('click', step);

restart();
&lt;/script&gt;


&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">A simple demo of k-means clustering. The little squares are the observations and the cirles are the centroids. Press the 'Step:' button to step through the algorithm.</summary></entry><entry><title type="html">elements-sk material design icons</title><link href="https://bitworking.org/news/2018/06/elements-sk-icons" rel="alternate" type="text/html" title="elements-sk material design icons" /><published>2018-06-20T00:00:00-04:00</published><updated>2018-06-20T09:38:49-04:00</updated><id>https://bitworking.org/news/2018/06/elements-sk-icons</id><content type="html" xml:base="https://bitworking.org/news/2018/06/elements-sk-icons">&lt;p&gt;The latest release of &lt;a href=&quot;https://www.npmjs.com/package/elements-sk&quot;&gt;elements-sk&lt;/a&gt;
has added elements for all the
&lt;a href=&quot;https://github.com/google/material-design-icons&quot;&gt;Material Design Icons&lt;/a&gt;.
You can see the full set of icons in action on the
&lt;a href=&quot;https://jsdoc.skia.org/elements-sk/icon-sk.html&quot;&gt;elements-sk documentation site&lt;/a&gt;.
Each one is its own module, so you only pay for what you use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">The latest release of elements-sk has added elements for all the Material Design Icons. You can see the full set of icons in action on the elements-sk documentation site. Each one is its own module, so you only pay for what you use.</summary></entry><entry><title type="html">Pulito and VanillaJS updated to webpack 4</title><link href="https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4" rel="alternate" type="text/html" title="Pulito and VanillaJS updated to webpack 4" /><published>2018-05-21T00:00:00-04:00</published><updated>2018-05-21T23:16:34-04:00</updated><id>https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4</id><content type="html" xml:base="https://bitworking.org/news/2018/05/pulito-and-vanillajs-updated-to-webpack-4">&lt;p&gt;Both &lt;a href=&quot;https://www.npmjs.com/package/pulito&quot;&gt;Pulito&lt;/a&gt; and &lt;a href=&quot;https://github.com/jcgregorio/vanillajs&quot;&gt;VanillaJS&lt;/a&gt; have updated to webpack 4.&lt;/p&gt;

&lt;p&gt;Additionally both have moved from yarn to npm. While npm still isn’t as fast
as yarn, the support for &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; files and increased attention to
security and speed are worth the tradeoff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Both Pulito and VanillaJS have updated to webpack 4.</summary></entry><entry><title type="html">Silicon Valley Libertarianism - Remembered</title><link href="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered" rel="alternate" type="text/html" title="Silicon Valley Libertarianism - Remembered" /><published>2018-03-26T00:00:00-04:00</published><updated>2018-03-26T19:13:22-04:00</updated><id>https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered</id><content type="html" xml:base="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-remembered">&lt;p&gt;Remember the last time silicon valley was growing like crazy without any supervision?
&lt;a href=&quot;https://www.nytimes.com/2018/03/26/lens/the-superfund-sites-of-silicon-valley.html&quot;&gt;We’re still dealing with that mess&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Remember the last time silicon valley was growing like crazy without any supervision? We’re still dealing with that mess.</summary></entry><entry><title type="html">Stop using Medium</title><link href="https://bitworking.org/news/2018/03/centralized-publishing" rel="alternate" type="text/html" title="Stop using Medium" /><published>2018-03-25T00:00:00-04:00</published><updated>2018-03-25T16:53:23-04:00</updated><id>https://bitworking.org/news/2018/03/centralized-publishing</id><content type="html" xml:base="https://bitworking.org/news/2018/03/centralized-publishing">&lt;p&gt;It’s 2018 and it’s still a &lt;a href=&quot;https://mastodon.xyz/@Liberapay/99744324870271197&quot;&gt;bad
idea to trust centralized publishing platforms&lt;/a&gt;. Film at 11.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">It’s 2018 and it’s still a bad idea to trust centralized publishing platforms. Film at 11.</summary></entry><entry><title type="html">Silicon Valley Libertarianism - An Obituary</title><link href="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary" rel="alternate" type="text/html" title="Silicon Valley Libertarianism - An Obituary" /><published>2018-03-20T00:00:00-04:00</published><updated>2018-03-20T08:48:18-04:00</updated><id>https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary</id><content type="html" xml:base="https://bitworking.org/news/2018/03/silicon-valley-libertarianism-an-obituary">&lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2018/03/18/us/cambridge-analytica-facebook-privacy-data.html&quot;&gt;Facebook’s Role in Data Misuse Sets Off Storms on Two Continents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On March 18th, 2018 Libertarianism, aka the #Just-Trust-In-The-Giant-Corporations movement, died
of a self-inflicted gun wound to the head. In lieu of flowers, please send
regulators to look after your citizens privacy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brid.gy/publish/twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joe Gregorio</name></author><summary type="html">Facebook’s Role in Data Misuse Sets Off Storms on Two Continents</summary></entry></feed>